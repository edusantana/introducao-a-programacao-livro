== Registros

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Criar registros em C
* Analisar problemas e reconhecer os campos necessários para utilizar nos
registros
* Reconhecer campos identificadores de registros
* Criar e manipular listas de registros
____________________

Neste capítulos nós iremos estudar sobre Registros. Vamos conhecer a sua
utilidade e como declará-los em C. Depois vamos analisar diversas situações 
para aprender como é o processo de criação de um registro.

Serão apresentados alguns programas demonstrando a utilização dos registros e 
por fim, vamos aprender como compor registros a partir de outros registros.

Mas, o que são Registros?

[[sec_registro_definicao]]
=== Definição de registro

(((Registro)))

Definição de Registro::
Um Registro é um *tipo de dado* criado pelo usuário, através da *composição* 
de outros tipos de dados.

Nós utilizamos registros quando desejamos criar um tipo de dado para reunir
informações sobre o que desejamos representar. No registro, as informações são
organizadas em *campos*.

Uma analogia de registro pode ser vista quando preenchemos um formulário. Na <<tab_formulario_cliente>>
nós temos um exemplo de formulário para cadastrar *Clientes*. Os *campos* do formulário
são preenchidos com os dados do cliente que nos interessa registrar.


Sabendo as informações que desejamos registrar sobre um Cliente, nós podemos
esquematizar um registro, informando os tipos de dado de cada campo, conforme
descrito na <<tab_registro_cliente>>.

[[tab_formulario_cliente]]
.Formulário para cadastro de Cliente
|====
2+| Nome:
| Data de Nascimento: | Telefone para contato:
| CPF: | RG:
|====

[[tab_registro_cliente]]
.Representação de um registro Cliente
[width="80%",cols="1,2,1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.5+^.^s| Cliente
| Nome | Textual
| Data de Nascimento | Numérico
| Telefone para contato | Textual
| CPF ★ | Numérico
| RG | Numérico
|====

[TIP]
.Relembrando
====
Em nossos programas nós utilizamos *variávies* para manter as informações que
desejamos manipular. 

No momento da criação de uma variável precisamos especificar
o *tipo de dado* que desejamos que ela mantenha, através da *declaração da 
variável*. Vamos relembrar como declaramos variáveis:

.Em pseudo-código
----
DECLARE nome_da_variavel: TEXTUAL
DECLARE var1,var2,var3: NUMÉRICO
----

.Em C
[source, c]
----
char[] nome_da_variavel;
double var1,var2,var3;
----

Quando especificamos mais de uma variável separadas por vírgula, assumimos que
todas elas possuem o mesmo tipo.
====


Na próxima seção, veremos como é a sintaxe para criação de registros, em
pseudo-código e em C.

[IMPORTANT]
====
Embora, na prática, o uso de registro geralmente esteja associado a ((persistência)) 
de dados, sempre que mencionarmos *cadastrar* neste capítulo, estamos nos
referindo a manter os dados *em memória* para consulta posterior.

Em um sistema real, geralmente existe alguma forma de persistência dos dados
através de arquivos ou banco de dados -- caso contrário, os dados seriam perdidos.
====

=== Sintaxe para criação de registros

(((Tipo de dado))) (((Registro, sintaxe)))

Agora que temos o entendimento que um registro é um *tipo de dado*, vamos conhecer
a sintaxe para especificá-lo:

.Sintaxe em pseudo-código para criar registro
[source, c]
----
REGISTRO nome_do_registro
	// Declarações dos campos
REGISTRO_FIM
----

.Sintaxe em C para criar registro
[source, c]
----
typedef struct {
	// Declarações dos campos
} nome_do_registro;
----

Quando criamos um novo tipo de dado precisamos nomeá-lo, para 
podermos referenciá-lo mais tarde. Nestas notações, `nome_do_registro` é
o nome do tipo de dado registro que será criado.

As `Declarações dos campos` definem os campos que *compõem* o registro. 
Esta *composição* ficará evidente nas próximas seções, onde iremos criar
e manipular vários registros.

Após a definição do novo tipo de dado registro, uma declaração de variável
com este tipo é realizada da forma usual:

.Declaração de variável do tipo criado em pseudo-código
----
DECLARE variavel_nome: nome_do_registro 
----

.Declaração de variável do tipo criado em C
----
nome_do_registro variavel_nome;
----


=== Identificadores de registros

(((Campo Identificador)))

Antes de começarmos a especificar os registros, vamos primeiro entender a 
necessidade de identificar unicamente um 'registro'.

[IMPORTANT]
====
A palavra *registro* pode ser empregada em dois contextos diferentes.

Tipo de dado:: É o tipo de dado, conforme apresentado na definição de Registro.

Instância do registro:: Utilizando a analogia do formulário, equivaleria às 
fichas dos clientes. Cada ficha preenchida equivale a uma instância ou um
'registro' daquele tipo.

Por conveniência, sempre que utilizarmos a palavra 'registro' para indicar
instância do tipo, ela será grafada em 'itálico'.
====

Identificadores de 'registros' são campos nos registros que os *identificam e 
diferenciam* um 'registro' de qualquer outro.

No registro indicado na tabela <<tab_registro_cliente>>, como podemos 
*diferenciar* um cliente cadastrado de outro? Qual campo *identifica* um cliente?
Seria o nome? Data de Nascimento? Telefone? CPF ou RG? Neste caso, preferimos
utilizar o CPF, pois sabemos que duas pessoas diferentes não podem possuir o 
mesmo número de CPF.

Em nosso livro, os campos *identificadores* estão marcados com ★.

[NOTE]
====
Os identificadores costumam ser do tipo *inteiro*, pois a comparação
de inteiros é mais rápida do que a comparação textual.
====

Na próxima seção, faremos análises em algumas situações, caso você não tenha
compreendido o que são *campos identificadores* terá outra oportunidade.

[[sec_registro_analise]]
=== Análise para criação de Registros

Nesta seção mostramos o processo de criação de um Registro em diversas situações
diferentes. 

Em cada situação apresentada faremos a seguinte *análise*:

// TODO glossário análise?

* Determinar o *tipo de registro* que vamos criar;
* Especificar quais serão os *campos* do registro, com os seus respectivos *tipos*;
* Indicar qual o *campo identificador* (★), caso exista;
* Apresentar o *código de criação* do Registro em Pseudo-código e em C.


[[situacao_aluno]]
==== Situação do cálculo das notas de um aluno
Em uma disciplina onde os alunos possuem *duas notas*, e precisamos registrar e 
*calcular as médias* de todos eles, como seria um registro para representar 
esta situação?

Nome do Registro:: Aluno
Campos:: Obviamente vamos precisar guardar *duas notas* para cada aluno. 'Vamos 
precisar guardar a média também?' Não, uma vez que temos as duas notas 
registradas, sempre que desejarmos consultar a média poderemos calculá-las.
'O nome do aluno seria uma informação útil?' Sem dúvidas! Será importante
registrar o *nome* do aluno pois poderíamos imprimir uma lista com os nomes, notas
e médias de cada aluno. 'A matrícula do aluno é importante também?' Nós poderíamos
suprimir a matrícula do aluno, mas qual seria a consequência disso? Por exemplo,
na lista de notas poderia conter apenas os nomes, notas e médias. Mas o que 
aconteceria se tivéssemos dois alunos com o mesmo nome? Nós precisamos de um 
informação extra para *identificar* e diferenciar um aluno do outro. 
Com este intuito, vamos optar por registrar a *matrícula* também. 'O nome
da disciplina é importante?' Neste caso não, pois estamos nos limitando aos alunos 
e suas notas.

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.4+^.^s| Aluno
| matricula ★ | Numérico
| nome  | Textual
| nota1 | Numérico
| nota2 | Numérico
|====

.Registro em Pseudo-código
----
include::code/registros/reg_aluno_pseudo.txt[]
----

[[ex_reg_aluno]]
[source, c]
.Registro em C: code/registros/reg_aluno.c
----
include::code/registros/reg_aluno.c[]
----

[NOTE]
Até agora você teve dificuldade para entender esta análise? Você compreendeu
a necessidade da utilização de `matrícula` como campo identificador? Concordou com
os tipos de dados utilizados para cada variável?

[[situacao_pessoa_imc]]
==== Situação do cálculo e consulta do IMC de uma pessoa
Nesta situação desejamos criar um sistema para *cadastrar* pessoas e em seguida
*consultar* o IMC delas.

Nome do Registro:: Pessoa
Campos:: Para o cálculo do IMC são necessárias duas informações: a *altura*
e o *peso*. Novamente, o *nome* da pessoa é uma informação relevante, pois
vamos imprimir o IMC calculado junto com o nome. 'Mas como realizar a consulta?
Após o cadastro realizado de algumas pessoas, qual o parâmetro de busca que 
iremos utilizar para encontrar a pessoa certa?' Poderíamos utilizar o nome 
completo da pessoa para encontrá-la. Mas digitar o nome todo é enfadonho. 
Poderíamos utilizar apenas o primeiro nome para busca, mas então teríamos
que apresentar um lista com todas as pessoas com aquele primeiro nome e selecionar
a pessoa correta entre elas.footnote:[A opção de utilizar o primeiro nome iria complicar o algorítmo da busca.] 
Se cadastrarmos o *CPF* da pessoa poderíamos consultá-la 
mais tarde informando apenas ele, simplificando a busca. Por último, como 
algumas tabelas do IMC apresentam os dados categorizados por *sexo*, vamos 
registrá-lo também. 

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.5+^.^s| Pessoa
| nome | Textual
| peso  | Numérico
| altura | Numérico
| cpf ★| Numérico
| sexo | Textual
|====

.Registro em Pseudo-código
----
include::code/registros/reg_pessoa_pseudo.txt[]
----

[[ex_reg_pessoa]]
[source, c]
.Registro em C: code/registros/reg_pessoa.c
----
include::code/registros/reg_pessoa.c[]
----

[NOTE]
====
Mais uma vez, embora nosso problema não tenha indicado os campos que necessita,
fomos capazes de deduzir alguns. Aqui não há certo ou errado, cada um pode
realizar sua análise e chegar a resultados diferentes.

Você concorda com os tipos de dados apresentados aqui? Não achou estranho `cpf`
ser do tipo `long long`? Você declararia `sexo` com outro tipo, diferente 
de *char*?

cpf:: Declaramos ele como `long long` pois os tipos *long* e *int* não 
armazenam números na ordem de *11* dígitos.

sexo:: Optamos por utilizar o tipo *char* para simplificar comparações, caso
sejam necessárias. Poderíamos declará-lo do tipo *int*, fazendo uma correspondência
de valores: 1=Feminino e 2=Masculino. Ou ainda poderíamos utilizar *char[]* e
registrar o texto completo: `Feminino` ou `Masculino`.
====



[[situacao_ponto_matematica]]
==== Situação sobre manipulação de pontos no plano cartesiano
Nesta situação desejamos criar um sistema matemático para manipular pontos no 
plano cartesiano.

Nome do Registro:: Ponto
Campos:: Para registrar um ponto no plano cartesiano basta informar os 
valores de suas coordenadas (x,y).

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.2+^.^s| Ponto
| x★  | Numérico
| y★ | Numérico
|====

.Registro em Pseudo-código
----
include::code/registros/reg_ponto_matematica_pseudo.txt[]
----

[[ex_reg_ponto]]
[source, c]
.Registro em C: code/registros/reg_ponto.c
----
include::code/registros/reg_ponto.c[]
----

[NOTE]
====
Neste registro nós temos uma novidade: estamos utilizando dois campos como
*identificadores* simultaneamente. As vezes um único campo só não é 
suficiente para identificar um 'registro'.

Neste caso, fica evidente que dois pontos são iguais se, e somente se, eles
possuírem os mesmo valores para o par (`x`,`y`).

E em relação ao tipo do dado? Você teria utilizado outro tipo, diferente 
de `int`, como `float` ou `double`? Mais uma vez, aqui não há certo ou errado,
nós optamos por `int` apenas por ser mais simples fornecer coordenadas em 
inteiro.
====


[[situacao_produto_supermercado]]
==== Situação sobre cadastro de produtos no supermercado
Nesta situação desejamos criar um sistema, para um supermercado, que cadastre 
produtos e seus preços.

Nome do Registro:: Produto
Campos:: Para registrar um produto vamos precisar do seu *nome* e o seu
*preço*. 'Mas como identificar um produto cadastrado?' Quando vamos no supermercado
e compramos alguma mercadoria no peso, o caixa do supermercado precisa fornecer 
um código para cadastrar o produto pesado. 
Geralmente ele utiliza uma tabela, onde há o nome do produto e o seu código. Para a nossa
aplicação vamos utilizar este mesmo *código* para identificar unicamente cada produto.

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.3+^.^s| Produto
| nome  | Textual
| preco | Numérico
| codigo ★| Numérico
|====

.Registro em Pseudo-código
----
include::code/registros/reg_produto_supermercado_pseudo.txt[]
----


[[ex_reg_produto]]
[source, c]
.Registro em C: code/registros/reg_protudo.c
----
include::code/registros/reg_produto.c[]
----

[NOTE]
====
Neste registro tivemos contato com um provável campo *identificador* universal,
o `codigo`. Geralmente, quando nos deparamos com um campo código, ele será 
utilizado  como o identificador.footnote:[A não ser quando o 
código for utilizado para designar uma senha.]
====



[[situacao_conta_bancaria]]
==== Situação sobre gerenciamento de contas bancárias
Nesta situação desejamos criar um sistema bancário para gerenciar clientes e 
suas contas bancárias.

Nomes dos Registros:: Cliente e Conta.
Campos:: O *nome* do cliente é uma informação relevante. O *CPF* poderá
ser utilizado para *diferenciar* clientes com o 
mesmo nome. 'Como identificar a conta do cliente?' Cada conta poderia ter um
*número de conta único*, que serviria para identificar a conta do cliente.
Cada conta terá um *saldo*, que será gerenciada pelo sistema. Como cada cliente
pode possuir mais de uma conta bancária, junto com a conta deveremos registrar
qual cliente é o dono dela. Vamos utilizar o *CPF do cliente na conta* para 
identificar o seu *dono*.


[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.3+^.^s| Conta
| numero_da_conta ★| Numérico
| saldo | Numérico
| cpf_do_cliente | Numérico
|====


.Registro em Pseudo-código
----
include::code/registros/reg_conta_pseudo.txt[]
----

[[ex_reg_conta]]
[source, c]
.Registro em C: code/registros/reg_conta.c
----
include::code/registros/reg_conta.c[]
----

[width="80%",cols="^1s,^1m,^1m",frame="topbot",options="header"]
|====
^| Novo tipo ^| Campo ^| Tipo do campo
.2+^.^s| Cliente
| nome  | Textual
| cpf ★| Numérico
|====

.Registro em Pseudo-código
----
include::code/registros/reg_cliente_pseudo.txt[]
----

[[ex_reg_cliente]]
[source, c]
.Registro em C: code/registros/reg_cliente.c
----
include::code/registros/reg_cliente.c[]
----

[NOTE]
====
Nesta situação temos outras novidades: a criação de *dois* Registros e utilização
de um campo para registrar o ((*relacionamento*)) entre os dois 
'registros'.footnote:[Relacionamento entre registros é um assunto que está
fora do escopo de uma disciplina de Introdução à Programação, você estudará 
este tópico numa disciplina de Banco de Dados.]

Percebam que `cpf` é o campo *identificador* de Cliente. Para identificar
que uma conta é de um determinado cliente, utilizamos o campo identificador
de cliente na conta.

Esta é uma estratégia muito importante para especificar *relacionamento*
entre registros, certifique-se que compreendeu-a antes de prosseguir.
====

=== Exemplos de utilização dos Registros
Nesta seção veremos alguns exemplos que demonstram a utilização de registros.
Nestes exemplos você irá aprender:

. Como atribuir e acessar valores aos campos do registro;
. Como atribuir valores de texto aos campos do registro;
. Como ler valores da entrada e atribui-los aos campos;
. Como declarar um arranjo de registros;
. Como acessar um campo num arranjo de registros.

==== Aluno
Exemplo de utilização do registro Aluno.

[source, c]
.code/registros/reg_aluno_exemplo.c
----
include::code/registros/reg_aluno_exemplo.c[]
----
<1> Como atribuir valores aos campos do registro.
<2> Como atribuir valores de texto aos campos do registro. Você já estudou a
função `strcpy` antes.
<3> Como acessar valores atribuídos aos campos do registro.

.Resultado ao simular a execução do programa
----
include::code/registros/reg_aluno_exemplo_simulacao.txt[]
----

==== Produto
Exemplo de utilização do registro Produto.

[source, c]
.code/registros/reg_produto_exemplo.c
----
include::code/registros/reg_produto_exemplo.c[]
----
<1> Como ler da entrada os valores e atribuí-los aos campos. Consulte a 
documentação de `scanf` (ou `fscanf`) para conhecer a sintaxe de leitura e 
conversão dos dados. Percebam a ausência de `&` antes do campo `nome`.

.Resultado ao simular a execução do programa
----
include::code/registros/reg_produto_exemplo_simulacao.txt[]
----

[WARNING]
====
Percebam que quando atribuímos um valor de texto aos campos do tipo *char[]*,
nós *suprimimos* o `&`. Isto correu com o campo `aluno.nome` em `strncpy` e `p.nome`
no `scanf`.
====


==== Pontos
Exemplo de utilização do registro Ponto com Arranjo.

[source, c]
.code/registros/reg_ponto_exemplo.c
----
include::code/registros/reg_ponto_exemplo.c[]
----
<1> Declaração de *constante* que definirá o tamanho do arranjo.
<2> Como declarar um arranjo de registros do tipo Ponto, com o tamanho definido 
pela constante `QUANTIDADE_DE_PONTOS`.
<3> Como acessar um campo em arranjo de registros. Cada posição, do arranjo
contém um registro. Você pode acessar as posições do arranjo com a mesma
sintaxe: `[índice]`.

.Resultado ao simular a execução do programa
----
include::code/registros/reg_ponto_exemplo_simulacao.txt[]
----

////
include::code/registros/reg_aluno_exemplo.txt[]
include::code/registros/reg_aluno_exemplo.c[]
include::code/registros/reg_pessoa_exemplo.txt[]
include::code/registros/reg_pessoa_exemplo.c[]
include::code/registros/reg_ponto_matematica_exemplo.txt[]
include::code/registros/reg_ponto_matematica_exemplo.c[]
include::code/registros/reg_produto_supermercado_exemplo.txt[]
include::code/registros/reg_produto_supermercado_exemplo.c[]
include::code/registros/reg_cliente_exemplo.txt[]
include::code/registros/reg_cliente_exemplo.c[]
include::code/registros/reg_conta_exemplo.txt[]
include::code/registros/reg_conta_exemplo.c[]
////

[[sec_registro_programas]]
=== Exercícios resolvidos

Nesta seção teremos a especificação de diversos problemas. Para cada um deles
iremos escrever um pseudo-código que resolva o problema descrito, utilizando
o recurso de Registros. Em seguida, iremos implementar um programa em C.

==== Programa do cálculo de médias de alunos

Escrever um programa que cadastre o nome, a matrícula e duas notas de vários alunos.
Em seguida imprima a matrícula, o nome e a média de cada um deles.

.Pseudo-código do programa
----
include::code/registros/reg_aluno_pseudo.txt[]
include::code/registros/calculo_das_medias_pseudo.txt[]
----
<1> Imprime a média calculada.

.Programa em C: code/registros/calculo_das_medias.c
[source,c]
----
include::code/registros/calculo_das_medias.c[]
----

.Resultado ao simular a execução do programa
----
include::code/registros/calculo_das_medias_simulacao.txt[]
----

==== Problema do cálculo e consulta do IMC de uma pessoa

Escrever um programa que cadastre o nome, a altura, o peso, o cpf e sexo
de algumas pessoas. Com os dados cadastrados, em seguida localizar uma pessoa
através do seu CPF e imprimir o seu IMC.

.Pseudo-código do programa
----
include::code/registros/reg_pessoa_pseudo.txt[]
include::code/registros/imc_calculo_pseudo.txt[]
----
<1> O ler o campo *identificador* de Pessoa (CPF).
<2> Pesquisa pelo registro Pessoa identificado pelo CPF lido.

.Programa em C: code/registros/imc_calculo.c
[source,c]
----
include::code/registros/imc_calculo.c[]
----
<1> O ler o campo *identificador* de Pessoa (`cpf`).
<2> Pesquisa pelo registro Pessoa identificado pelo CPF lido.


.Resultado ao simular a execução do programa
----
include::code/registros/imc_calculo_simulacao.txt[]
----

==== Problema de pontos no plano cartesiano

Escrever um programa que leia 5 pontos. Em seguida imprima qual o ponto mais
próximo do primeiro ponto lido.

.Pseudo-código do programa
----
include::code/registros/reg_ponto_matematica_pseudo.txt[]
include::code/registros/ponto_proximo_pseudo.txt[]
----

<1> `MAIOR_INTEIRO` representa o maior número inteiro que podemos armazenar numa
variável. Geralmente atribuímos *o maior* inteiro quando procuramos por
*um menor* valor. No código, comparamos `menor_distancia_ao_quadrado` com
`distancia_ao_quadrado` e salvamos o *menor* deles. Se executarmos isso 
sucessivamente, ao final, `menor_distancia_ao_quadrado` conterá o *menor* valor
comparado.footnote:[Caso tivéssemos inicializado a variável `menor_distancia_ao_quadrado`
com `0`, ao compará-lo com outro número, ele seria o *menor*, 
impossibilitando encontrar a *menor* distância.]
<2> Esta variável irá guardar a posição do ponto mais próximo. Ela é atualizada,
sempre que encontramos outro ponto com menor distância.
<3> Calculo para encontrar a distância entre dois pontos. Na realizadade, a 
distância entre os dois pontos seria a raiz de `distancia_ao_quadrado`. Mas
não há diferença em comparar a distância ao quadrado. Sabemos, por exemplo, 
que a *raiz* de `x` é *menor do que a raiz* de `y` se `x` for *menor* do 
que `y`.


.Programa em C: code/registros/ponto_proximo.c
[source,c]
----
include::code/registros/ponto_proximo.c[]
----

.Resultado ao simular a execução do programa
----
include::code/registros/ponto_proximo_simulacao.txt[]
----


==== Problema sobre cadastro de produtos no supermercado

Escrever um programa que cadastre vários produtos. Em seguida, imprima uma lista
com o código e nome da cada produto. Por último, consulte o preço de um produto
através de seu código.

.Pseudo-código do programa
----
include::code/registros/reg_produto_supermercado_pseudo.txt[]
include::code/registros/prob_supermercado_pseudo.txt[]
----

.Programa em C: code/registros/supermercado.c
[source,c]
----
include::code/registros/supermercado.c[]
----

.Resultado ao simular a execução do programa
----
include::code/registros/supermercado_simulacao.txt[]
----

==== Problema sobre gerenciamento de contas bancárias

Escreva um programa que simule contas bancárias, com as seguintes especificações:

* Ao iniciar o programa vamos criar contas bancárias para três clientes.
** Cada conta terá o nome e o CPF do cliente associado a ela.
** No ato da criação da conta o cliente precisará fazer um depósito inicial.
* Após as contas serem criadas, o sistema deverá possibilitar realizações de 
saques ou depósitos nas contas.
** Sempre que uma operação de saque ou depósito seja realizada, o sistema deverá
imprimir o nome do titular e o saldo final da conta.


.Pseudo-código do programa
----
include::code/registros/reg_conta_pseudo.txt[]
include::code/registros/reg_cliente_pseudo.txt[]
include::code/registros/prob_conta_bancaria_pseudo.txt[]
----

.Programa em C: code/registros/conta_bancaria.c
[source,c]
----
include::code/registros/conta_bancaria.c[]
----

.Resultado ao simular a execução do programa
----
include::code/registros/conta_bancaria_simulacao.txt[]
----

Após todos estes programas, agora vamos ver uma técnica que não utilizada ainda,
a inicialização de 'registro' com valores pré-definidos.

[[sec_registro_inicializacao]]
=== Inicializando registros

Quando declaramos uma variável do tipo registro, também podemos realizar uma
atribuição aos valores dos seus campos. O programa a seguir ilustra
esta atribuição.

WARNING: Para a atribuição poder ocorrer, os campos precisam ser inseridos
*na ordem que foram declarados* no tipo do registro.

.Programa em C: code/registros/reg_atribuicao.c
[source,c]
----
include::code/registros/reg_atribuicao.c[]
----
<1> Seguindo a ordem da declaração do registro, `matricula` recebe `15`, `nome` 
recebe ``Virgulino da Silva'', `nota1` recebe `9` e `nota2` recebe `10`.
<2> Seguindo a ordem da declaração do registro, `nome` recebe ``Maria Bonita''
e `cpf` recebe `72779162201`.

.Resultado ao simular a execução do programa
----
include::code/registros/reg_atribuicao_simulacao.txt[]
----

NOTE: O *Registro* é um tipo de dado composto por campos com outros tipos. 'Mas
será que é possível declarar um campo do tipo Registro?' Veremos a resposta
na próxima seção.

[[sec_registro_composicao]]
=== Composição de Registros

Na definição de registros (<<sec_registro_definicao>>), vimos que um Registro é
criado pela *composição* de outros tipos de dado. Agora veremos que podemos 
compor um Registro utilizando outros Registros *previamente definidos*.

CAUTION: Ao realizar composição de registros, a definição do registro que 
será utilizado na composição precisa *aparecer antes* (no código fonte)
da definição do novo registro. Caso contrário, você poderá ter erros de 
compilação.

==== Triângulo

Nesta seção vamos definir um Registro triângulo que contém *3* campos do 
tipo `Ponto`.

.Composição de registro em Pseudo-código
----
include::code/registros/reg_triangulo_pseudo.txt[]
----

[source, c]
.Composição de registro em C: code/registros/reg_triangulo.c[]
----
include::code/registros/reg_triangulo.c[]
----

[NOTE]
====
Neste exemplo, o registro do tipo Triângulo foi criado com campos
do tipo `Ponto`, os três campos foram: `p1`, `p2` e `p3`. Para acessar a 
coordenada `x` do primeiro ponto do Triângulo `t`, chamamos: `t.p1.x`.

Foram dispostas duas atribuições de coordenadas numa mesma linha apenas para
ficar melhor visualmente, não há necessidade de serem assim.
====

==== Informação Pessoal

Nesta seção vamos definir um Registro `InformacaoPessoal` e utilizá-lo no Registro
`Aluno` e `Cliente`.

.Composição de registro em Pseudo-código
----
include::code/registros/reg_infopessoal_pseudo.txt[]
----

[source, c]
.Composição de registro em C: code/registros/reg_infopessoal.c[]
----
include::code/registros/reg_infopessoal.c[]
----

[NOTE]
====
A composição de Registro utiliza a sintaxe usual de declaração de
campos. Uma vez que definimos um novo tipo, basta utilizar o tipo na declaração
normal do campo.

O acesso aos campos internos do registro passam pelo campo definido no registro
externo, por exemplo, para acessar o interno `cep`, primeiro precisamos referenciar
o campo externo `info_pessoal`, portanto o acesso fica: `a.info_pessoal.cep`.
====

Para finalizar nossos estudos sobre Registro, na seção seguinte vamos compará-lo
com Arranjo.

[[sec_registro_comparacao]]
=== Comparação entre Arranjo e Registro

A tabela a seguir mostra uma comparação entre Arranjos e Registros.

[cols="1a,1a",frame="topbot",options="header"]
|====
| Arranjo (ou array) | Registro
| 
* Estrutura de dados homogênea
** Arranjo de variáveis referenciadas por um mesmo nome e indexada por um inteiro. Ex: `notas[i]`.
* Armazena vários valores, mas *todos do mesmo tipo*.
|
* Estrutura de dados heterogênea
** Coleção de variáveis referencias por um mesmo nome
* Armazena vários valores, e *podem ser de diferentes tipos*
* Cada valor é armazenado num campo com um tipo próprio
|====


=== Recapitulando

Iniciamos este capítulo conhecendo a definição de *Registro* e sua utilidade. 

Em seguida aprendemos a sua *sintaxe* de criação. Vimos o que é um 
campo *identificador*, e como ele é utilizado para diferenciar
um registro de outro.

Realizamos *análises* em 5 situações demonstrando como criamos registros em
cada uma delas.

Na <<sec_registro_programas>> vimos como implementamos diversos programas em
pseudo-código e em C.

Por fim, aprendemos como um registro pode ser inicializado 
(<<sec_registro_inicializacao>>), comparamos os registros com os arranjos 
(<<sec_registro_comparacao>>) e aprendemos como criar um registro através da 
composição de outro (<<sec_registro_composicao>>).

No próximo capítulo aprenderemos como reaproveitar código, criando
nossas próprias funções.


=== Atividades

1. *Entendo a necessidade dos registros.* Nós poderíamos escrever os programas
sem utilizar registros. Qual a utilidade de se utilizar registros nos programas?

2. O que é um campo *identificador*? Dê exemplos *não* contidos neste capítulo.

3. Na <<sec_registro_analise>> analisamos diversas situações buscando os campos
necessários para criação de Registros. Agora chegou a sua vez de fazer o 
mesmo. Para cada situação a seguir:
+
--
* Defina o(s) *nome(s)* do tipo de registro que você criará
* Especifique os *campos* com seus respectivos *tipos*
* Indique quais são os campos *identificadores*, caso exista
* Escreva as *declarações* do(s) Registro(s) em C
--

.. Um programa para registrar os animais e os clientes de um Petshop.
.. Um programa para registrar e consultar filmes.
.. Um programa para uma biblioteca registrar os seus livros.
.. Um programa para agendar e consultar compromissos.

4. *Pratique o uso de registros*. Utilizando os registros definidos no
capítulo, faça pequenos programas e teste com as entradas indicadas.footnote:[Testar 
com valores pré-definidos facilita o desenvolvimento dos programas, 
faça disso um hábito. Veremos mais adiante como redirecionar a entrada
do programa, facilitando ainda mais os testes.]
+
--
.. Utilizando o <<ex_reg_aluno>>, faça um programa que indique
a situação de cada Aluno: *Aprovado*, se média das notas for maior ou igual 5;
*Reprovado* se a média for inferior a 5; *Aprovado com menção de honra* se
média for superior ou igual a 9.
+
--
.Entrada: nome matrícula nota1 nota2
----
include::code/registros/exercicio_aluno.data[]
----
--

.. Utilizando o <<ex_reg_pessoa>>, escreva um programa que imprima o
IMC das mulheres, depois o dos homens. Quando imprimir o IMC, exiba uma mensagem
indicando a condição em que a pessoa se encontra, segundo a tabela a seguir.
+
[width="85%",cols="2,3",frame="topbot",options="header"]
|====
| IMC               | Classificação
| abaixo de 18,5    | Subnutrido ou abaixo do peso
| entre 18,6 e 24,9 | Peso ideal (parabéns)
| entre 25,0 e 29,9 | Levemente acima do peso
| entre 30,0 e 34,9 | Primeiro grau de obesidade
| entre 35,0 e 39,9 | Segundo grau de obesidade
| acima de 40       | Obesidade mórbida
|====
+
--
.Entrada: nome altura peso cpf sexo
----
include::code/registros/exercicio_pessoa.data[]
----
--

.. Utilizando o <<ex_reg_ponto>>, escreva um programa que leia alguns
pontos, indicando em qual quadrante eles estão no plano cartesiano.
+
--
.Entrada: p1.x p1.y p2.x p2.y p3.x p3.y
----
include::code/registros/exercicio_ponto.data[]
----
--

.. Utilizando o <<ex_reg_produto>>, escreva um programa que cadastra
uma lista de produtos. Em seguida imprima os produtos ordenadamente pelo
menor preço.
+
--
.Entrada: codigo nome valor
----
include::code/registros/exercicio_produto.data[]
----
--
--

5. *Criando novos Registros*. Agora que você já praticou a utilização de
Registro está no momento de criar os seus próprios Registros.
+
[IMPORTANT]
====
As questões a seguir *não* especificam os programas minuciosamente, elas foram 
elaboradas assim para permitir que você expresse a sua criatividade. 
No entanto, você deve:

* Resolver as questões utilizando os conhecimentos adquiridos neste capítulo
* Utilizar composição de registros quando for apropriado
* Preparar valores de entradas fixos para o seu programa, de forma a testá-lo
eficientemente.

====

.. Faça um programa para um Petshop, para cadastrar os clientes da loja e 
seus animais. O programa deve possibilitar pesquisa pelo cliente ou pelo
seu animal.

.. Faça um programa para gerenciar os gastos pessoais. O programa deve poder
registrar os gastos por categoria e emitir um relatório para proporcionar
um controle financeiro.

.. Faça um programa para registrar os filmes que você assistiu ou quer assistir.
Os filmes devem ser cadastrados por categorias. O programa deve emitir listas
de filmes com base em dois critérios à sua escolha.

.. Faça um programa para auxiliar a Policia Federal acompanhar as explosões de
caixas eletrônicos ao longo do tempo. Após cadastrar as explosões, o sistema
deve informar as regiões críticas.

.. Faça um programa para simular um dicionário. Ele deve cadastrar algumas
palavras e possibilitar alguma forma de navegação. Consulte um dicionário real
para verificar que além do significado da palavra, outras informações diferentes
também são cadastradas.

// Sempre termine os arquivos com uma linha em branco.

