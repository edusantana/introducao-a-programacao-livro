[[estrutura_controle]]
== Estruturas de Controle 

////
FIXME Atualizar os objetivos, colocá-los na forma de habilidades
que serão desenvolvidas.
////

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Apresentar os conceitos e comandos de seleção
* Apresentar os conceitos e comandos de decisão
* Apresentar os conceitos e comandos de repetição
* Apresentar os conceitos e comandos de desvio
____________________


=== Introdução

Vimos no <<algoritimos>> que os algoritmos são instruções que contém passos para 
solucionar um determinado problema. Vimos também que estes algoritmos podem 
ser representados através de linguagens de programação, como por exemplo, a 
linguagem C, que estamos aprendendo aqui. Estes passos são executados na 
sequência que eles aparecem. Entretanto, em muitas situações, é necessário 
alterar o fluxo de execução destas instruções. Pode ser que seja necessário 
executar um passo, ou um conjunto deles, apenas se uma determinada condição `for` 
verdadeira, ou talvez, pode ser que seja preciso repetir um conjunto de passos várias vezes 
até uma determinada condição. Neste sentido, este capítulo irá explicar as 
diferentes estruturas de controle existentes nos algoritmos e seus respectivos 
comandos na linguagem C.

=== Estrutura Sequencial

Um algoritmo que possui uma estrutura sequencial significa que suas 
instruções são executadas na sequência em que elas aparecem, sem nenhuma 
alteração no seu fluxo, a não ser, claro, que exista alguma instrução 
explícita para a mudança deste fluxo. Vejamos o código em C na 
<<estrutura_sequencial>> abaixo.

[[estrutura_sequencial]]
.Estrutura sequencial na linguagem C
image::images/estruturas-de-controle/sequencia.png[scaledwidth="40%"]

Este algoritmo irá ler dois valores e guardá-los, respectivamente, nas 
variáveis `x` e `y`. Após isso, a variável inteira 'soma' receberá a soma dos 
valores de `x` e `y`. Em seguida, será mostrada na saída padrão, o resultado 
desta soma. Perceba que os passos do algoritmo são executados de cima para 
baixo.

Entretanto, em alguns momentos os problemas que queremos resolver requerem a 
alteração no fluxo normal de execução do algoritmo. Na próxima seção, 
iremos aprender como executar um conjunto de instruções de acordo com uma determinada 
condição.

=== Estrutura de Decisão
Como foi dito, muitas vezes é necessário criar blocos de instruções no 
algoritmo que são executados apenas se uma determinada condição `for` 
verdadeira. Veja o algoritmo abaixo:

 "Se hoje não chover, então João irá à praia".

No algoritmo acima, João irá à praia se, e somente se, não chover hoje. 
Significa que esta instrução de João ir à praia só será executada se a 
condição de não chover for verdadeira. Este tipo de estrutura é chamado de 
*estrutura de decisão*, também conhecido como estrutura de seleção ou 
condicional.

Podemos ter três tipos de estrutura de decisão: decisão simples, decisão 
composta e decisão múltipla. Vamos ver adiante estes três tipos e quais são 
os comandos na linguagem C, respectivamente, para cada um destes tipos.

==== Decisão simples
(((Se)))

Quando queremos que uma determinada instrução ou um conjunto de instruções 
execute apenas se uma determinada condição for verdadeira. A estrutura da 
decisão simples é a seguinte:

 SE condição ENTÃO instrução

Uma condição deve ter como resultado apenas dois valores possíveis: 
verdadeiro ou falso. A instrução só será executada se a condição tiver o 
valor verdadeiro.

Vamos analisar o exemplo a seguir. Este algoritmo lê um valor digitado pelo 
usuário e armazena na variável `x`. Em seguida, o comando `SE` verifica se o 
valor de `x` é menor que `20`. Caso seja, a instrução `ESCREVA` é executada, 
mostrando na tela a frase "o valor de X é menor que 20".

(((LEIA)))(((ESCREVA)))

[[alg_menorq20]]
.Algoritmo que comparava valor lido com 20
============
 LEIA x
 SE x < 20 ENTÃO 
 ESCREVA "o valor de X é menor que 20"
============

Para cada linguagem de programação há uma sintaxe para criar estruturas de 
controle. Na Linguagem C, a estrutura de decisão simples possui a seguinte 
forma: 

[source, c]
-------------------------------------------
 if (expressão) 
     instrução;
-------------------------------------------


Na linguagem C, a condição é definida como uma expressão, que pode ser 
lógica ou aritmética. Ao ser executada, a expressão é verificada. Se o 
resultado desta for verdadeiro, a instrução que vem após a expressão é 
executada. 

Entretanto, muitas vezes queremos que mais de uma instrução seja executada 
caso a condição seja verdadeira. Neste caso, devemos utilizar um bloco de 
instruções dentro do comando *if*, como é mostrado abaixo. 

(((if)))

.Estrutura de decisão simples com blocos na linguagem C
[source, c]
-------------------------------------------
 if (expressão) {
     instrução 1;
     instrução 2;
     ...
 }
-------------------------------------------

As duas formas, com e sem bloco, se diferenciam apenas pelo fato de que a 
primeira possui apenas uma instrução a ser executada caso a condição seja 
verdadeira. No segundo caso, um bloco de instruções será executado. Na 
linguagem C, um bloco de instruções deve estar entre chaves.

[IMPORTANT]
Sempre que você precisar executar um bloco de instruções, utilize as chaves 
para delimitar o início e o fim deste bloco.  

Como foi dito, a expressão pode conter uma expressão lógica ou aritmética. 
As expressões aritméticas foram vistas no capítulo 2. Vamos ver agora como 
funcionam as expressões lógicas na linguagem C.

// FIXME adicionar link para o capítulo 2 no paragrafo acima.

===== Expressões lógicas

(((Expressões lógicas)))

As expressões lógicas são usualmente utilizadas para fazer comparações 
entre operandos. Para isso, estas expressões são compostas por operadores 
lógicos e relacionais, e possuem apenas dois valores possíveis: verdadeiro ou 
falso. Por exemplo, quando queremos saber se um valor é maior, menor, igual ou 
diferente de um outro valor.

Na linguagem C, os seguintes operadores relacionais podem ser utilizados:

[cols="^1,^1",options="header"]
|========================
| Operador | Descrição
| `>`        | Maior que
| `<`        | Menor que
| `>=`       | Maior ou igual a
| `<=`       | Menor ou igual a
| `==`       | Igual a
| `!=`       | Diferente de
|========================
	
Considere o código <<menorq20>> abaixo. Este reflete o mesmo algoritmo de <<alg_menorq20>>, 
sendo que agora, implementado na linguagem C. Na linha 5, estamos pedindo para 
o usuário entrar com o valor de `x`. Na linha 6, temos um comando `if`, onde há 
uma expressão `lógica x < 20`. Portanto, esta expressão é verificada e caso 
seja verdadeira, será mostrado na saída padrão "o valor de X é menor que a 
20" (linha 7). Caso a expressão seja falsa, o algoritmo se encerra sem mostrar 
nada na saída padrão, pois a instrução após o comando `if` não é 
executada. 

[[menorq20]]
[source, c, numbered]
.code/estruturas-de-controle/menorq20.c
-------------------------------------------
include::code/estruturas-de-controle/menorq20.c[]
-------------------------------------------

Em outros casos, necessitamos utilizar operadores lógicos nas expressões para 
avaliar mais de uma expressão relacional. Por exemplo, digamos que no problema 
acima queremos verificar se o valor digitado para a variável `x` está dentro do 
intervalo entre `10` *e* `20`. Neste caso, precisamos que a condição verifique as 
duas expressões relacionais: `(x > 10)` *e* `(x < 20)`. Portanto, precisamos 
conectar as duas expressões relacionais utilizando um operador lógico `E`. A 
tabela abaixo apresenta os operadores lógicos possíveis:

(((E))) (((Ou))) (((Não)))

[cols="^1,^1",options="header"]
|========================
| Operador | Descrição
| &&       | E
| \|\|     | OU
| !        | NÃO
|========================

Portando, o algoritmo para resolver o problema acima, na linguagem C, é o 
seguinte:


[source, c, numbered]
.code/estruturas-de-controle/entre10e20.c
-------------------------------------------
include::code/estruturas-de-controle/entre10e20.c[]
-------------------------------------------

Perceba que agora, dentro da condição do comando `if` temos duas expressões 
relacionais conectadas por um operador lógico `E` (`&&`). Neste caso, se ambas as 
expressões forem verdadeiras, será mostrada na saída padrão "X está entre 
10 e 20". Caso alguma das expressões seja falsa, nada será mostrado, pois o 
resultado da expressão completa é falso. Vejamos a tabela abaixo que mostra a 
relação lógica entre duas expressões e seus respectivos resultados.

[cols="^1,^1,^1,^1",options="header"]
|========================
|Expressão 1|Operador|Expressão 2|Resultado
|Verdadeiro|E|Verdadeiro|Verdadeiro
|Verdadeiro|E|Falso|Falso
|Falso|E|Falso|Falso
|Verdadeiro|OU|Verdadeiro|Verdadeiro
|Verdadeiro|OU|Falso|Verdadeiro
|Falso|OU|Falso|Falso
|Verdadeiro|NÃO|-|Falso
|Falso|NÃO|-|Verdadeiro
|========================

===== Exercício resolvido
*ER 3.1.* Considere quatro variáveis `a`, `b`, `c` e `d` com valores iniciais de 5, 7, 3 
e 9. Dada as condições abaixo, indique se o resultado final da expressão 
será verdadeiro ou falso.

a. `(a != 3 || b < 10 || c == 5)`
b. `(d > 8 && c == 3 || a >=10)`
c. `!(d == 12 && a != 10)`
d. `(c == 4 || d <= 6) && (a >= 5 && b != 9) || (!(a < 5))`

Resposta:

a. Neste caso temos três expressões lógicas. A primeira `(a != 3)` é 
verdadeira. A segunda `(b < 10)` é verdadeira, e a terceira `(c == 5)` é falsa. 
Como as expressões estão conectadas por um operador OU (`||`), então basta que 
uma das expressões seja verdadeira para o resultado da expressão completa ser 
verdadeira. 
b. Temos neste caso três expressões. Para um melhor entendimento, vamos 
utilizar uma tabela. A primeira expressão `(d > 8)` é falsa. A segunda 
expressão `(c == 3)` é verdadeira. Estas duas primeiras expressões estão 
conectadas pelo operador lógico `&&`, logo `R1 && R2` é falso, pois apenas `R2` é 
verdadeiro. A terceira expressão `(a >= 10)` é verdadeira. Então, resolvendo 
`R3 || R4`, temos o resultado final como verdadeiro.
+
[format="csv",cols="^1,^1,^1",options="header"]
|===================================================
Rs, Expressão,	Resultado
R1,	`d > 8`,	FALSO
R2,	`c == 3`,	VERDADEIRO
R3,	`R1 && R2`,	FALSO
R4,	`a >= 10`,	VERDADEIRO
R5,	`R3 || R4`,	VERDADEIRO
|===================================================

c. Utilizando novamente a tabela, temos que a primeira expressão `(d == 12)` é 
falsa. A segunda expressão `(a != 10)` verdadeira. A relação entre `R1 && R2` 
é falsa, pois apenas `R2` é verdadeira. A última expressão é uma negação 
de `R3`, ou seja, se `R3` é falso, então `R4` é verdadeiro.
+
[format="csv",cols="^1,2,3",options="header"]
|===================================================
R,	Expressão,	Resultado
R1,	`d == 12`,	FALSO
R2,	`a != 10`,	VERDADEIRO
R3,	`R1  && R2`,	FALSO
R4,	`!R3`,	VERDADEIRO
|===================================================

d. Vamos utilizar novamente a tabela para nos auxiliar. Temos que prestar 
bastante atenção nos parênteses das expressões que podem ser utilizadas 
para explicitar a precedência da avaliação. 
+
[format="csv",cols="^1,2,3",options="header"]
|===================================================
Rs,	Expressão,	Resultado
R1,	`c == 4`,	FALSO
R2,	`d <= 6`,	VERDADEIRO
R3,	`R1 || R2`,	VERDADEIRO
R4,	`a >= 5`,	VERDADEIRO
R5,	`b != 9`,	VERDADEIRO
R6,	`R4 && R5`,	VERDADEIRO
R7,	`a < 5`,	FALSO
R8,	`!R7`,	VERDADEIRO
R9,	`R3 && R6`,	VERDADEIRO
R10,	`R9 || R8`,	VERDADEIRO
|===================================================


===== Verificação da condição com expressões aritméticas na Linguagem C

(((if)))

Anteriormente, dissemos que a expressão dentro de um comando `if` pode ser 
lógica ou aritmética. Vimos como funciona nos casos de expressões lógicas. 
Nos casos de expressões aritméticas, na linguagem C, 'Falso' assume o valor 
zero, e 'Verdadeiro' assume qualquer valor diferente de zero.  Neste sentido, 
quando utilizamos uma expressão aritmética dentro da condição de um comando 
`if` para verificar se esta é verdadeira ou falsa, temos que ter o cuidado de 
analisar o valor resultante. Vamos verificar o exemplo no código abaixo.


[source, c, numbered]
.code/estruturas-de-controle/if5.c
-------------------------------------------
include::code/estruturas-de-controle/if5.c[]
-------------------------------------------

A variável inteira `x` recebe o valor `5` (linha 4). Na linha 5 existe uma 
estrutura de decisão simples. O que acontece neste ponto é a verificação da 
expressão que está entre parêntese depois do identificador `if`. Neste caso, a 
expressão é apenas a própria variável `x`, logo o resultado da expressão é 
o valor desta, que é `5`. Considerando o que foi dito, quando o resultado for 
*diferente de zero*, considera-se *verdadeiro*. Logo, o resultado da 
expressão é verdadeiro, e então a instrução que vem após a condição é executada.

Já na linha 7, também há outra estrutura de decisão simples onde a 
condição é a expressão `x - 5`. O resultado desta expressão é *zero*, e 
então, neste caso, é considerado *falso*. Portanto, a instrução que vem após 
a condição não é executada.

==== Decisão composta 
(((if-else)))

Em alguns momentos, ao termos uma estrutura de decisão, queremos que uma outra 
instrução ou um outro bloco de instruções seja executado caso a condição 
de decisão seja falsa. Esta estrutura é chamada de decisão composta.

O pseudocódigo abaixo exemplifica uma estrutura de decisão composta. 

[[alg_decisao_composta]]
.Pseudocódigo com decisão composta
=====================
 LEIA nota
 SE nota >= 7 ENTÃO 
   ESCREVA "Aprovado"
 SENÃO
   ESCREVA "Reprovado"
=====================

Na linguagem C, utilizamos a palavra `else`, após a instrução ou bloco de 
instruções do `if`, para definir que queremos executar um outro conjunto de 
instruções, caso a expressão condicional seja falsa. 


[source, c]
-------------------------------------------
 if (expressão) 
   instrução 1;
 else 
   instrução 2;
-------------------------------------------

Quando possuímos apenas uma instrução a ser executada, não precisamos 
utilizar o delimitador de bloco de instruções (as chaves). Neste caso, a 
condição é verificada. Caso seja positiva, a instrução 1 é executada, 
caso contrário, a instrução 2 é executada. Caso queiramos que um conjunto 
de instruções seja executado, devemos utilizar então as chaves, como mostra 
o código abaixo.

[source, c]
-------------------------------------------
 if (condição) {
   instrução 1;
   instrução 2;
   ...
 } else {
   instrução 3;
   instrução 4;
   ...
 }
-------------------------------------------

Neste caso temos dois blocos de instruções: um para o bloco do `if`, que será 
executado caso a condição seja verdadeira, e o bloco de instruções do `else`, 
caso a condição seja falsa.

(((indentação)))

IMPORTANT: Tabule as instruções que estão dentro dos blocos, colocando-os mais a 
direita (utilize a tecla TAB do teclado). Esta organização do código 
chama-se *indentação*. Dessa maneira, seu código se torna mais legível, e 
consequentemente mais fácil de encontrar possíveis erros. 

Vamos traduzir o pseudocódigo apresentado no exemplo para a linguagem C.

[source, c, numbered]
.code/estruturas-de-controle/nota7.c
-------------------------------------------
include::code/estruturas-de-controle/nota7.c[]
-------------------------------------------

===== Exercício resolvido

*ER 3.2.* Escreva um programa para ler 2 números inteiros do teclado (A e B), 
verificar e imprimir qual deles é o maior, ou a mensagem "A=B", caso sejam 
iguais.

Resposta:

[source, c, numbered]
.code/estruturas-de-controle/comparaab.c
-------------------------------------------
include::code/estruturas-de-controle/comparaab.c[]
-------------------------------------------

==== Comando de decisão múltipla
(((switch)))

Uma outra forma de escrever uma estrutura de condição é utilizando o comando 
de decisão múltipla `switch`. Este tipo de estrutura condicional tem a mesma 
função do `if-else-if`, com a diferença que o comando `switch` não aceita 
expressões, apenas constantes. A vantagem de se utilizar este comando é a 
legibilidade do código quando conhecemos os possíveis valores para uma 
determinada variável. Vamos ver o formato de uso do comando `switch`. 


[source, c]
-------------------------------------------
 switch (variável) {
    case VALOR1: 
      instruçao1;
      instrução2;
      break;
    case VALOR2: 
      instruçao3;
      instrução4;
      break;
    default: 
      instruçao5;
      instrução6;
      break;
 }
-------------------------------------------

Uma variável do tipo `char` ou `int` é colocada entre parênteses após o comando 
`switch`. Os valores desta variável que serão avaliados logo em seguida, através 
das declarações `case`. Para cada possível valor da variável, existe uma 
declaração `case` correspondente. Caso o valor seja aquele que corresponde na 
declaração `case`, então as instruções abaixo dela serão executadas até 
encontrar o comando `break`. A declaração `default` é opcional, e é executada 
apenas se a variável não for igual a nenhuma das constantes definidas nas 
declarações `case`.	

IMPORTANT: O comando `break` tem a função de interromper um determinado fluxo de 
execução. Este comando será melhor explicado na seção 3.4.5 que fala sobre 
os comandos de desvio. O importante a saber por hora é que o comando `break` 
deve ser utilizado ao final das instruções de cada declaração `case`. Caso 
não seja colocado, as instruções das outras declarações `case` também 
serão executadas.

//FIXME corrigir seção acima

Para um melhor entendimento, vamos analisar o código <<semana_c>> abaixo. A ideia deste 
programa é que o usuário digite o valor numérico correspondente ao dia da 
semana e o programa mostre por extenso este dia. Uma variável chamada `semana` 
do tipo `char` é declarada (linha 4) e guardará o valor que o usuário irá 
digitar (linha 5). Em seguida, o comando `switch` foi utilizado (linha 6). Para 
cada dia da semana existe uma declaração `case` correspondente. Isto significa 
que se o usuário digitou o valor 1, a instrução da linha 8 será executada, mostrando 
na saída a string "domingo". Caso o valor digitado seja 2, a instrução da linha 11 é 
executada, mostrando na saída a string "segunda-feira". A mesma ideia acontece 
para os outros 5 dias da semana. Caso o valor digitado pelo usuário não seja 
entre 1 e 7, as instruções da declaração `default` serão executadas, mostrando a 
string "dia da semana inválido".

[[semana_c]]
[source, c, numbered]
.code/estruturas-de-controle/semana.c
-------------------------------------------
include::code/estruturas-de-controle/semana.c[]
-------------------------------------------

=== Estrutura de Repetição

(((Enquanto)))

Considere um algoritmo em que você precise repetir um determinado conjunto de 
passos, por exemplo, um algoritmo para retirar uma lâmpada do bocal. Um passo 
deste algoritmo é realizar um movimento com a mão para girar a lâmpada. Este 
passo deve ser repetido até que a lâmpada desencaixe do bocal. Neste sentido, 
existem as estruturas de repetições nas linguagens de programação para 
permitir que uma instrução ou um bloco de instruções seja repetido em um 
algoritmo computacional. Estas estruturas também são conhecidas como 
estruturas de iteração ou estruturas de laço.

Vamos tomar como base <<alg_decisao_composta>>, onde uma nota é solicitada ao 
usuário. Caso a nota seja maior que 7, é mostrado ``Aprovado'' na tela, caso 
contrário, é mostrado "Reprovado". O algoritmo utilizado até então, só 
permite que uma nota seja digitada, ou seja, quando o usuário digita a nota e 
o programa apresenta o resultado e em seguida fecha. Mas digamos que agora 
queremos que o programa continue executando, solicitando notas a apresentando o 
resultado, até que o usuário digita um valor fora do intervalo de 0 a 10 para 
sair do programa. Este algoritmo é mostrado no pseudocódigo abaixo. Perceba 
que temos uma condição `nota <> -1` que será avaliada antes de executar as 
instruções que estão dentro do bloco do `ENQUANTO`. Então, enquanto a nota 
digitada pelo usuário for diferente de `-1`, o programa irá solicitar uma nota 
e apresentar o resultado.

[[alg_estrutura_repeticao]]
.Pseudocódigo com estrutura de repetição
========================
 ENQUANTO nota <> -1 FAÇA
   LEIA nota
   SE nota >= 7 ENTÃO
     ESCREVA "Aprovado"
   SENÃO
     ESCREVA "Reprovado"
 FIM-ENQUANTO 
========================

Na linguagem C há três opções diferentes para se criar estruturas de 
repetição. São os comandos `while`, `do-while` e `for`. Veremos cada um deles em 
detalhes a seguir.

==== Comando while
(((while)))

Podemos usar o comando `while` quando desejamos que uma ou mais instruções 
sejam repetidas até que uma determinada condição seja atendida. 

Na linguagem C, a estrutura do `while` possui o formato abaixo. A estrutura é 
bastante parecida com a do pseudocódigo apresentado acima. 

[source, c]
-------------------------------------------
 while (expressão) {
   instrução 1;
   instrução 2;
   ...
 }
-------------------------------------------

As instruções serão executadas repetidamente enquanto a expressão for 
verdadeira. Assim que esta condição tornar-se falsa, o laço para. Vejamos o 
exemplo abaixo. Ele traduz o pseudocódigo <<alg_estrutura_repeticao>>.


[source, c, numbered]
.code/estruturas-de-controle/whilenota.c
-------------------------------------------
include::code/estruturas-de-controle/whilenota.c[]
-------------------------------------------

Vamos tentar entender o código acima. Uma variável `nota` é declarada (linha 
2), sendo iniciada com o valor `1`. Após isto, existe um comando de repetição 
`while` (linha 3) com a condição `nota != -1`. Isto significa que enquanto esta 
condição for verdadeira, o bloco de instruções dentro do `while` será 
executado (linhas 6 a 10). Como o valor de `nota` é `1`, então é verdade que nota 
é diferente de `-1`, logo, o bloco de instruções dentro do `while` é 
executado. 

Vamos ver outro exemplo. O programa <<mostrado10vezes>> abaixo escreve 10 vezes na tela "isto será 
mostrado 10 vezes". A condição de parada do comando `while` é `cont <= 10`, isto 
significa que enquanto o valor de `cont` for menor ou igual a `10`, o bloco de 
instruções será executado. Portanto, dentro deste bloco, a variável `cont` 
precisa ser incrementada, para que o laço termine assim que o valor desta 
passar a ser `11`.


[[mostrado10vezes]]
[source, c, numbered]
.code/estruturas-de-controle/mostrado10vezes.c
-------------------------------------------
include::code/estruturas-de-controle/mostrado10vezes.c[]
-------------------------------------------

===== Exercício resolvido

*ER 3.3*: Escreva um programa que leia várias notas de alunos de uma turma. O 
programa deve ler notas até que o usuário digite o valor `-1`. Após isso, o 
programa de mostrar a média destas notas.

Resposta:

Neste programa, não sabemos previamente a quantidade de notas que o usuário 
precisa. Precisamos, neste caso, utilizar um laço de repetição que fique 
lendo notas até que o valor `-1` seja passado pelo usuário. Portanto, podemos 
utilizar o comando `while` (linha 5) neste caso, onde a condição de parada é a 
nota diferente de -1 (`nota != -1`). Dentro do laço, é pedido que o usuário 
digite a nota (linha 4). Na linha 5, o valor digitado pelo usuário é 
armazenado na variável nota. Para calcular a média das notas, precisamos de 
duas informações: a soma de todas as notas e a quantidade de notas lidas. 
Neste caso, utilizamos a variável `soma` para armazenar a soma das notas (linha 
8) e a variável `cont` para armazenar a quantidade de notas (linha 9). A média 
das notas será mostrada depois do laço, ou seja, quando o usuário digitar -1 
na nota. Neste caso, o comando de saída deve ficar fora do laço de 
repetição (linha 11).

[[notas_alunos_c]]
[source, c, numbered]
.code/estruturas-de-controle/notas_alunos.c
-------------------------------------------
include::code/estruturas-de-controle/notas_alunos.c[]
-------------------------------------------


==== Comando do-while

(((do-while)))

O comando `do-while` também é uma estrutura de repetição, bastante parecida 
com o `while` visto anteriormente. A diferença é que o bloco de instruções 
dentro do laço é executado pelo menos uma vez, mesmo que a condição seja 
falsa. Isto acontece porque, a condição de parada só é avaliada depois que 
as instruções são executadas. Vamos ver a estrutura do comando `do-while`.

[source, c]
-------------------------------------------
 do {
    instrução 1;
    instrução 2;
    ...

 } while (condição);
-------------------------------------------


O comando começa com a palavra `do`, seguida do bloco de instruções a ser 
repetida. Após a execução destas instruções, a condição é avaliada. 
Caso seja verdadeira, o fluxo volta a executar novamente as instruções, caso 
contrário, o laço se encerra. Para entender melhor, observe o exemplo abaixo. 
Este exemplo faz exatamente o mesmo que o exemplo anterior, porém, utilizando 
o comando `do-while`.

////
XXX faz exatamente o mesmo que o exemplo anterior... qual anterior?
////

[[do_while_c]]
[source, c, numbered]
.code/estruturas-de-controle/do_while.c
-------------------------------------------
include::code/estruturas-de-controle/do_while.c[]
-------------------------------------------



==== Comando for
(((for)))

Este comando também serve para criar um laço de repetição, e geralmente é 
utilizado quando conhecemos a quantidade de vezes que queremos que as 
instruções sejam repetidas. 

O formato do comando `for` é o seguinte:

[source, c]
-------------------------------------------
 for (expressão1; condição; expressão2) {
    instrução1;
    instrução2;
    ...
 }
-------------------------------------------

Em `expressão1`, uma variável, geralmente um contador, recebe um valor inicial. 
Essa variável será incrementada ou decrementada de acordo com a expressão 
definida em `expressão2`. O laço ficará executando as instruções 
(`instrução1` e `instrução2`) até que a `condição` seja falsa. 

Vejamos o exemplo abaixo para entender a sequência em que as expressões e a 
condição do comando `for` são avaliadas. O programa <<for_cont>> abaixo tem o mesmo 
resultado de <<do_while_c>> mostrado anteriormente. Uma variável inteira é declarada (linha 4). 
Diferentemente de <<do_while_c>>, não estamos inicializando-a com nenhum valor, 
pois ela será inicializada na primeira expressão do comando for. Na linha 5, 
existe um comando `for` onde a primeira expressão é a inicialização da 
variável `cont`. Em seguida, a condição `cont <= 10` é avaliada. Como a 
expressão é verdadeira, a instrução na linha 6 é executada. No fim da 
execução da instrução contida dentro do `for`, a terceira expressão do `for` 
é avaliada, que neste caso é um incremento `(cont++)`. Então a variável `cont` 
é incrementada e passa a valer `2`. Em seguida, a condição é verificada 
novamente e caso seja verdadeira, executa novamente a instrução dentro do 
`for`. Esta execução é repetida até que a condição seja avaliada como falsa.

[[for_cont]]
[source, c, numbered]
.code/estruturas-de-controle/for_cont.c
-------------------------------------------
include::code/estruturas-de-controle/for_cont.c[]
-------------------------------------------


Para entender melhor o funcionamento do comando `for`, vamos ver outro exemplo 
que utiliza decremento (`--`) ao invés de incremento. A ideia é muito parecida com o 
exemplo anterior, a diferença é que, ao invés de incremento, temos um 
decremento da variável `cont`. No comando `for`, a variável `cont` é inicializada 
com o valor `10`. Em seguida, a condição `cont > 0` é avaliada. Como o valor de 
`cont` é `10`, a condição é verdadeira, e a instrução dentro do `for` é 
executada (linha 6). Ao fim da execução desta instrução, a variável cont 
é decrementada e passa a valer `9`. Novamente a condição `cont >` 0 é 
verificada e continua sendo verdadeira, o que faz com que a instrução da 
linha 6 seja executada novamente. Este laço continuará até a variável `cont` 
passar a valer `0`, pois neste caso, a condição `cont > 0` será falsa.

[source, c, numbered]
.code/estruturas-de-controle/for_cont_decremento.c
-------------------------------------------
include::code/estruturas-de-controle/for_cont_decremento.c[]
-------------------------------------------

Um detalhe do comando `for` é que nenhum dos três elementos que o compõe é 
obrigatório, ou seja, pode-se deixar de definir a expressão de 
inicialização, a condição, ou a expressão de incremento/decremento.

==== Laço infinito

(((Laço infinito)))

Quando a condição de parada de uma determinada estrutura de repetição nunca 
se torna falsa, significa o que chamamos de *laço infinito*, ou seja, este laço 
nunca irá parar de ser executado e o programa entra em *loop*. Vamos ver o 
exemplo abaixo. 

[source, c, numbered]
.code/estruturas-de-controle/laco_infinito.c
-------------------------------------------
include::code/estruturas-de-controle/laco_infinito.c[]
-------------------------------------------

Neste exemplo, temos um comando `for` (linha 2) onde a condição de parada não 
foi definida. Uma vez que não há esta condição, o laço entra em loop e a 
execução da instrução na linha 4 é executada indefinidamente.

WARNING: Ao criar uma estrutura de repetição, observe bem a condição de parada 
para verificar se ela realmente se tornará falsa em algum momento, pois senão, 
você estará criando um laço infinito e seu programa, possivelmente, não 
terá o resultado esperado. 

==== Exercício Resolvido
*E.R 3.4.* Analise o programa abaixo. O objetivo do programa é ler 50 valores e 
mostrar, ao final da leitura, o menor deles. Entretanto, ele possui um problema. 
Identifique e corrija o erro.

[source, c, numbered]
.code/estruturas-de-controle/menor_deles.c
-------------------------------------------
include::code/estruturas-de-controle/menor_deles.c[]
-------------------------------------------

Resposta:

Vamos analisar o código considerando seu objetivo: ler 50 valores e apresentar 
o menor deles. Vamos iniciar nossa análise na estrutura de repetição `while`, 
na linha 7. A condição é `quantidade < 50`.  Logo percebemos que a variável 
`quantidade`, que tem o valor inicial de `1` na sua declaração, não é alterada 
em nenhum momento dentro do laço, o que sugere algum problema. Para o laço 
ter um fim, é necessário que a variável `quantidade` atinja o valor `50` em 
algum momento, e não é isso que está acontecendo. Portanto, temos um laço 
infinito. Logo, devemos incluir uma linha dentro do laço para incrementar o 
valor da variável `quantidade`. 

O código abaixo apresenta a solução do problema com a inclusão da linha 12, 
onde a variável `quantidade` é incrementada. Dessa forma, o laço deixou de ser 
infinito, uma vez que ele atingirá o valor `50` em algum momento, tornando 
verdadeira a condição `quantidade < 50` do laço.


[source, c, numbered]
.code/estruturas-de-controle/menor_deles_resposta.c
-------------------------------------------
include::code/estruturas-de-controle/menor_deles_resposta.c[]
-------------------------------------------

==== Comandos de desvio

Vimos no último exemplo o que é um laço infinito. Em alguns momentos, 
precisamos utilizar um comando para realizar um desvio dentro do laço de 
repetição. Estes comandos são: `break` e `continue`. Ambos podem ser utilizados 
em qualquer estrutura da repetição. 

===== Comando break

(((break)))

O comando `break` interrompe a execução do laço, fazendo com que as 
instruções após este comando, dentro do laço, não sejam executadas. Vamos 
ver o exemplo <<break_interrompe>>. Apesar de não haver a condição de parada 
no `for`, ele irá parar quando o comando `break` for executado, ou seja, quando 
o valor da variável `cont` for igual a `10`. Caso houvesse mais alguma outra 
instrução após a linha 7, dentro do bloco de instruções do `for`, ele não seria
executado após a execução do `break`. 

[[break_interrompe]]
[source, c, numbered]
.code/estruturas-de-controle/break_interrompe.c
-------------------------------------------
include::code/estruturas-de-controle/break_interrompe.c[]
-------------------------------------------


===== Comando continue
(((continue)))

O comando `continue` faz com que o fluxo de execução pule para a avaliação da 
condição de parada do laço no caso do `while` e `do-while` e para a expressão 
de incremento e decremento, no caso do comando `for`. Isto significa que as 
instruções após este comando não são executadas.

Agora vamos analisar o programa <<continue_desvio>> abaixo. 
Este programa mostra na tela os 
números ímpares no intervalo de 1 a 20. A variável `cont` é inicializada com 
o valor `1` no `for`. Como a condição é verdadeira, as instruções dentro do 
bloco são executadas. Agora atenção para o comando `if` (linha 6). Na 
condição do `if` há uma expressão `cont % 2 == 0`, o que significa que se o 
resto da divisão inteira entre a variável `cont` e `2` for `0`, o comando 
`continue` é executado. Entretanto, o resto da divisão será `1`. Neste caso, a 
instrução do `if` não é executada, e a instrução da linha 7 é executada, 
mostrando o valor `1` na saída. Em seguida, a expressão de incremento do `for` é 
avaliada, e `cont` passa a valer `2`. Como `cont` ainda é menor ou igual a `20` as 
instruções do bloco são executadas novamente. Novamente, na linha 6, a 
condição do `if` é avaliada. Entretanto, o resto da divisão de `cont` e `2` é 
igual a `0`, e então a instrução `continue` é executada. Uma vez este comando 
sendo executado, o fluxo volta para o `for`, e a expressão de incremento é 
avaliada. Note que a instrução da linha 7, neste caso, não será executada 
quando o comando `continue` é executado. O valor de `cont` então é incrementado 
para `3`, repetindo o que foi explicado quando `cont` era igual a `1`. 

[[continue_desvio]]
[source, c, numbered]
.code/estruturas-de-controle/continue_desvio.c
-------------------------------------------
include::code/estruturas-de-controle/continue_desvio.c[]
-------------------------------------------



=== Recapitulando

Este capítulo apresentou as estruturas sequenciais, de controle e de 
repetição e como estas estruturas são utilizadas na linguagem C. 

A estrutura sequencial significa que o fluxo de execução das instruções 
segue uma linha sequencial, que no caso da linguagem C, é de cima para baixo. 
Entretanto, podemos mudar o fluxo de execução destas instruções utilizando 
as estruturas de controle e de repetição. No caso da estrutura de controle, 
aprendemos a utilizar os comandos `if`, `else` e `switch` para executar uma 
instrução ou um bloco de instruções caso uma determinada condição seja 
verdadeira. 

Aprendemos também a construir laços de repetição com os comandos `while`, 
`do-while` e `for`. Vimos que todos estes comandos proporcionam a repetição de 
instruções até que uma determinada condição seja falsa. Diante disto, é 
importante ter bastante atenção na condição de parada destas estruturas de 
repetição, para não criar um laço infinito.

No próximo capítulo, aprenderemos sobre arranjos, que tem o objetivo de 
representar um conjunto de valores do mesmo tipo. Vamos também aprender a 
manipular uma cadeia de caracteres, chamada de strings.

=== Exercícios Propostos
1. Escreva um programa que verifique se um número digitado pelo usuário é 
menor, igual ou maior que zero.
2. Dado o algoritmo abaixo, explique o que acontece se o valor lido para a 
variável `x` for: `3`, `1` e `0`. Explique o porquê.
+
[source, c]
-------------------------------------------
#include <stdio.h>

void main() {
  int x;
  scanf(&x);
  if (x) then printf("verdadeiro");
}
-------------------------------------------

3. Escreva um programa que informe se um dado ano é ou não bissexto. Obs.: um 
ano é bissexto se ele for divisível por 400 ou se ele for divisível por 4 e 
não por 100.
4. Escreva um programa que mostre todos os números pares no intervalo de 1 a 
40 de forma decrescente, utilizando o comando `while`. Depois faça o mesmo, mas 
desta vez, utilizando o comando `for`.
5. Um determinado banco abriu uma linha de crédito para os funcionários 
públicos. Porém, o valor máximo da prestação não poderá ultrapassar 30% 
do salário deste funcionário. Faça um programa para ajudar este banco. O 
programa deve permitir o usuário entrar com o salário do funcionário e o 
valor da prestação e informar se o empréstimo pode ou não ser concedido.
6. Escreva um programa que leia o mês do ano em valor numérico e exiba este 
mês por extenso (utilize o comando `switch`).
7. Faça três programas que mostrem de 1 a 10 na tela, utilizando, em cada um, 
uma estrutura de laço de repetição diferente. 
8. Escreva um programa que mostre na tela os números múltiplos de 3 no 
intervalo de 2 a 100.
9. Escreva um programa para ler dois números inteiros M e N e, a seguir, 
imprimir os números pares existentes no intervalo [M, N]. 
10. A organização de um evento esportivo deseja um programa que faça a 
leitura do nome e a pontuação de cada um dos 10 participantes e exiba o nome 
do vencedor. Elabore este programa.
11. O supermercado Excelente Preço está precisando ser informatizado. Neste 
sentido, o dono quer um programa que leia os preços dos produtos até que seja 
informado o valor zero. No final o programa deve informar o total da compra e 
perguntar a forma de pagamento. As opções da forma de pagamento são: 1) A 
vista; 2) No cartão de crédito. Se a opção escolhida for a vista, então o 
programa informa o valor da compra com um desconto de 5%. Caso a compra seja no 
cartão de crédito, o programa informa o valor da compra dividido em 4 vezes.




// Sempre termine os arquivos com uma linha em branco.

