== Algoritmos

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Definir algoritmo
* Descrever suas principais características
* Criar algoritmos utilizando diferentes formas de representação
____________________

É comum pensarmos em uma estratégia para executar uma tarefa do nosso 
dia a dia, mesmo que ela seja muito simples. Ao escovar os dentes, por exemplo, 
nós seguimos diferentes estratégias. Uns começam com a escovação dos 
molares e depois partem para os dentes da frente, outros fazem o inverso.  
Enfim, existem várias formas de escovarmos os dentes, assim como existem 
várias maneiras de realizarmos diversas atividades. Você sabia que o conjunto 
de passos para resolver um certo problema ou realizar determinada tarefa 
chama-se algoritmo? E que eles são importantíssimos para a programação de 
computadores? 

Neste capítulo estudaremos as características dos algoritmos, suas formas de 
representação e, sobretudo, a relação entre eles e a programação de 
computadores.

=== Introdução

Fonte inspiradora de livros e filmes, o americano Monty Roberts (<<monty>>), 
conhecido como o “encantador de cavalos”, revolucionou a forma de domar 
cavalos. Ao estudar o comportamento de cavalos selvagens, percebeu que existe 
entre eles uma linguagem corporal compartilhada. Entendendo tal linguagem, 
conseguiu rapidamente ganhar a confiança de cavalos arredios e instruí-los 
à se comportarem como desejava. Além de não usar de violência, essencial no 
emprego dos métodos convencionais, seu método é capaz de domar cavalos em 
poucos dias, ao contrário dos primeiros domadores, que normalmente necessitam de várias 
semanas.

[[monty]]
.Monty Roberts.
image::images/algoritmos/monty.jpg[scaledwidth="25%"]

Assim como os cavalos, os computadores também são instruídos por meio de uma 
linguagem particular. Para que eles se comportem como desejamos, basta que sejam 
comandados a partir de uma linguagem que sejam capazes de entender.

Diferentemente do que ensina o senso o comum, os computadores não possuem 
inteligência. Seu único trabalho é processar dados, conforme uma sequência 
de instruções que fazem parte do vocabulário da linguagem que eles conseguem 
compreender. A ilusão de que eles realizam tarefas de forma inteligente é 
proporcionada através desse conjunto ordenado de instruções, que é 
denominado de algoritmo. Neste caso, o “domador” do computador, responsável por 
elaborar o algoritmo que vai orientá-lo na execução de uma determinada 
tarefa, é chamado de programador de computadores.

=== O que é um algoritmo?

A palavra “algoritmo” é derivada do nome Mohammed ibn Musa 
Al-Khowarizmique, que foi um matemático, astrólogo, astrônomo e autor 
persa. Ele fez parte de um centro acadêmico conhecido como a Casa da 
Sabedoria, em Bagdá, por volta de 800 d.C. Seus trabalhos introduziram o 
cálculo hindu aos árabes e, a partir daí, ao resto da Europa. 

Não obstante, os algoritmos representam um conceito central na Ciência da 
Computação, sua atuação não se limita a essa área do conhecimento. 
Rotineiramente, lidamos com algoritmos na realização das mais variadas 
tarefas. Eles podem ser utilizados para lavar um carro, preparar um bolo, tomar 
banho, montar um guarda-roupa, etc. Perceba que os algoritmos não devem ser 
confundidos com as atividades. Eles se referem aos passos seguidos para que 
estas sejam realizadas. Como exemplo de algoritmos, podemos citar as 
instruções para montagem de equipamentos, para utilização de cosméticos 
como shampoos e condicionadores, para saída de emergência em meios de 
transporte, receitas culinárias, manuais de uso, entre outros.

A partir do que foi exposto, podemos definir algoritmo como 'uma sequência 
finita, ordenada e não ambígua de passos para solucionar determinado problema 
ou realizar uma tarefa'. 

Na ciência da computação, este conceito foi formalizado em 1936, por Alan Turing e 
Alonzo Church, da seguinte forma:

.Definição de Algorítimo
____________________
Um algoritmo é um conjunto não ambíguo e ordenado de passos executáveis que 
definem um processo finito.
____________________


O exemplo a seguir mostra como pode ser elaborado um algoritmo para realizar 
uma atividade com a qual lidamos corriqueiramente:

[[fritar-ovo]]
.Algoritmo para fritar um ovo
. Retire o ovo da geladeira.
. Coloque a frigideira no fogo.
. Coloque óleo na frigideira.
. Quebre ovo, separando a casca.
. Ponha a clara e a gema na frigideira.
. Espere um minuto.
. Apague o fogo.
. Retire o ovo da frigideira.

Agora considere o seguinte problema. Suponha que você dispõe de duas vasilhas 
de nove e quatro litros respectivamente. Como elas não possuem marcação, não é 
possível ter medidas intermediárias sobre o volume ocupado. O problema 
consiste, então, em elaborar uma sequência de passos, por meio da 
utilização das vasilhas de nove e quatro litros, a fim de encher uma terceira 
vasilha com seis litros de água. A figura abaixo ilustra dois possíveis 
passos de um algoritmo para resolver o problema.


.Ilustra dois passos possíveis envolvendo as operações de encher e esvaziar as vasilhas. Em (a) apenas a primeira vasilha está cheia. Já em (b) os nove litros da primeira vasilha são colocados nas outras duas.
image::images/algoritmos/ilustracao-dois-passos.png[scaledwidth="50%"]



Uma solução para o problema pode ser alcançada a partir do seguinte 
algoritmo:

[[vasilha]]
.Algoritmo para encher vasilhas
. Encha a vasilha de nove litros.
. Usando a vasilha de nove litros, encha a de quatro.
. Coloque a quantidade que sobrou (cinco litros) na terceira vasilha (*v3 = 5*).
. Esvazie a vasilha de quatro litros.
. Encha novamente a vasilha de nove litros.
. Usando a vasilha de nove litros, encha a de quatro.
. Esvazie a de quatro litros.
. Usando a sobra da de nove litros (cinco litros), encha novamente a de quatro 
litros.
. Coloque a sobra da de nove litros (agora um litro) na terceira vasilha 
(*v3 = 5 + 1 = 6*).


=== Características de um algoritmo

Todo algoritmo, seja ele computacional ou não, recebe uma entrada, processa-a 
e gera uma saída segundo seu conjunto de passos. No caso do algoritmo para 
fritar ovo, a entrada corresponde à frigideira, ao ovo e ao óleo. O 
processamento ocorre com a execução de seus passos, gerando como saída o ovo 
frito.  

Os algoritmos computacionais, especificamente, possuem as seguintes 
características:

Definição:: Os passos de um algoritmo devem ser bem definidos, objetivando a 
clareza e evitando ambiguidades.

Finitude:: Um algoritmo deve chegar ao seu fim após um número finito de 
passos.

Efetividade:: Um algoritmo deve ser efetivo, ou seja, suas operações devem 
ser básicas o suficiente para que possam, em princípio, serem executadas de 
maneira exata e em um tempo finito.

Entradas:: Um algoritmo deve possuir zero ou mais entradas. Estas são insumos 
ou quantidades que são processados pelos algoritmos durante a execução de 
seus passos.

Saídas:: Um algoritmo deve possuir uma ou mais saídas. Elas representam o 
resultado do trabalhado realizado pelos algoritmos.

=== Formas de representação
As formas mais comumente utilizadas para representar algoritmos são as 
seguintes:

- Descrição narrativa
- Fluxograma
- Linguagem Algorítmica

Todas elas apresentam pontos fortes e fracos, não existindo consenso entre os 
especialistas sobre a melhor forma de representação. Apresentaremos as 
nuances de cada uma nas próximas seções.

==== Descrição Narrativa

Os algoritmos são expressos em linguagem natural (português, inglês, 
francês, espanhol, etc.).  Sua principal desvantagem se encontra no fato da 
linguagem natural estar bem distante da linguagem utilizada pelos computadores. 
Logo, a tradução de uma para a outra se torna uma atividade bastante 
dispendiosa. Além disso, linguagens naturais são mais propensas à 
ambiguidades. Muitas vezes uma palavra pode ter vários significados, 
dependendo do contexto no qual são utilizadas. Em contrapartida, é bem mais 
fácil elaborar um algoritmo por meio de uma linguagem com a qual já temos uma 
certa familiaridade, do que através de linguagens que não são utilizadas com 
frequência no dia a dia. 

Os exemplos de algoritmos mostrados anteriormente (<<fritar-ovo>> e <<vasilha>>) 
refletem esta forma de representação.

==== Fluxograma
Consiste em usar formas geométricas padronizadas para descrever os passos a 
serem executados pelos algoritmos. As formas apresentadas na Figura 1.3 são as 
mais comumente utilizadas em fluxogramas.

.Formas geométricas utilizadas em fluxogramas
image::images/algoritmos/fluxograma.png[scaledwidth="50%"]

A vantagem de se fazer uso dos fluxogramas está na facilidade de 
compreendê-los. Descrições de algoritmos mediante formas gráficas são mais 
facilmente compreendidas do que descrições que envolvem apenas textos. Além 
do mais, os fluxogramas possuem um padrão mundial no que se refere à sua 
simbologia, tornando sua utilização independente das peculiaridades das 
linguagens naturais. 

Para exemplificar o uso de fluxogramas, a <<fluxograma-calcular-media>> 
mostra um algoritmo para 
calcular a média final de um aluno com base em suas notas e classificá-lo 
como aprovado ou reprovado. Analisando-a com mais cuidado, é possível 
perceber que os fluxogramas tendem a crescer bastante quando descrevem 
algoritmos constituídos de muitos passos, o que dificulta tanto sua 
construção como sua visualização. Além dessa desvantagem, por impor regras 
para sua utilização de acordo com cada forma geométrica, há uma limitação 
no seu poder de expressão, se comparado com a descrição narrativa.

[[fluxograma-calcular-media]]
.Fluxograma para calcular a média de um aluno
image::images/algoritmos/fluxograma-calcular-media.png[scaledwidth="30%"]

==== Linguagem Algorítmica

A linguagem que o computador é capaz de compreender tem grande influência na 
elaboração de algoritmos projetados para ele. Seus passos não podem conter 
instruções desconhecidas ou fazer referência a símbolos ou expressões que 
os computadores não conseguem decifrar. Tal linguagem, tantas vezes mencionada 
neste capítulo, se baseia em conceitos e em arquiteturas de hardware que 
determinam o funcionamento básico de um computador. Dentre as existentes, a 
mais utilizada nos computadores atuais é a arquitetura de von Neumann. Seu 
autor, John Von Neumann (<<john-von-neumann>>), propôs um modelo em que as instruções 
e os dados ficam juntos na memória.

O processador busca as instruções na memória e as executa uma de cada vez, 
segundo o seguinte ciclo de execução:

. Busca instrução;
. Decodifica instrução;
. Executa instrução;
. Volta para o passo 1 para buscar a instrução seguinte na memória.

[[john-von-neumann]]
.John von Neumann
image::images/algoritmos/john-von-neumann.jpg[scaledwidth="15%"]


Para esclarecer como funciona a execução de um algoritmo baseado no ciclo de 
execução mencionado, considere uma memória com 32 posições para 
armazenamento, organizada conforme <<memoria32posicoes>>.

[[memoria32posicoes]]
.Representação de uma memória com 32 posições para armazenamento. 
image::images/algoritmos/memoria32posicoes.png[scaledwidth="40%"]


Os números do canto superior direito de cada célula indicam os endereços de 
memória correspondentes a cada posição da memória representada. Nas três 
primeiras células constam as instruções que serão executadas e, da oitava 
à décima, constam valores armazenados nas posições de memória nomeadas por 
x, y e z, respectivamente.

Supondo que a execução do algoritmo em questão inicia-se com a busca da 
instrução no endereço 0 (zero),  o ciclo de execução continua com a 
decodificação da instrução x = 2, que, após sua realização, resulta no 
armazenamento do valor 2 na posição de memória de número 8, nomeada de x. O 
passo 4 então é executado, dando início à busca da próxima instrução. 
Com isso, a instrução y = 3 é encontrada e decodificada, gerando como 
resultado o armazenamento do valor 3 na posição de número 9, nomeada de y. O 
mesmo ocorre com a instrução z = x.y, que, após sua decodificação, 
armazena o valor 6 (produto de x por y) na posição de endereço 10 e rotulada 
de z. O algoritmo em descrição narrativa para a execução das instruções 
anteriores encontra-se logo abaixo:


.Algoritmo para multiplicar dois números
. Escreva 2 na posição de memória nomeada de x.
. Escreva 3 na posição de memória nomeada de y.
. Multiplique x e y e o resultado escreva em z.



Modelos como o mencionado anteriormente não apenas definem a forma como os 
dados são processados pelo computador, mas também a linguagem que eles são 
capazes de compreender. Assim sendo, a linguagem utilizada pelos computadores 
está restrita a um conjunto limitado de instruções, cujo funcionamento 
depende de sua arquitetura de hardware. As linguagens de programação 
imperativas (Pascal, C, Cobol etc), por exemplo, foram criadas em função da 
arquitetura de von Neumman.

A linguagem algorítmica, também chamada de pseudocódigo ou pseudo-linguagem, 
por sua vez, consiste no emprego de uma linguagem intermediária entre a 
linguagem natural e uma linguagem de programação. Esse meio termo resulta em 
uma linguagem que se aproxima das construções de uma linguagem de 
programação, sem exigir, no entanto, rigidez na definição das regras para 
utilização de suas instruções. Geralmente, essa forma de representação de 
algoritmos é uma versão reduzida de linguagens de alto nível como C e 
Pascal. Segue abaixo o algoritmo da <<fluxograma-calcular-media>> 
em pseudocódigo:


////
TODO: criar um hightlight para pseudocódigo
Ver: http://xpt.sourceforge.net/techdocs/nix/tool/asciidoc-usg/ascu03-SourceCodeHighlighting/single/
Ou : asciidoc-8.6.8/filters/code
////

[source,pascal,numbered]
-------------------------------------------
ALGORITMO
  DECLARE nota1, nota2, M : NUMÉRICO
  LEIA nota1
  LEIA nota2
  M ← (nota1 + nota2) / 2
  SE M >= 7.0 ENTÃO
    ESCREVA “Aprovado”
  SENÃO
    ESCREVA “Reprovado”
  FIM-SE
FIM_ALGORITMO.
-------------------------------------------


As palavras em letras maiúsculas correspondem à palavras reservadas que fazem 
parte do conjunto de regras que a linguagem algorítmica deve seguir. Embora 
sejam mais flexíveis do que as linguagens de programação em relação ao seu 
uso (a instrução `LEIA`, por exemplo, muitas vezes é substituída por 
`LER`, `OBTER`, etc.), algumas palavras são necessárias, pois 
facilitam o entendimento e aproximam o pseudocódigo de um programa de 
computador. As palavras `INÍCIO` e `FIM`, por exemplo, indicam onde 
começa e termina o algoritmo.  Já as instruções `LEIA` e `ESCREVA` 
referem-se a operações de entrada e saída de dados (ex.: ler dados do 
teclado ou exibir uma frase no monitor), presentes na maioria das linguagens de 
programação. 

Seguindo com a explicação do algoritmo, perceba que a linha com a instrução 
`M ← (nota1 + nota2) / 2` contém dois símbolos ainda não apresentados. 
O símbolo `/` diz respeito à operação aritmética da divisão, ao passo 
que o símbolo `←` expressa uma operação de atribuição, que pode ser 
lida da seguinte forma: 'A posição de memória, representada simbolicamente 
por M, recebe o valor da soma de nota1 e nota2, dividido por dois'. Para 
finalizar, a linha 6 apresenta uma estrutura de controle condicional essencial 
para as linguagens de programação. Operações de atribuição, expressões e 
estruturas de controle fazem parte do núcleo das linguagens de programação 
imperativas e são, portanto, fundamentais para o aprendizado da programação. 
Todos esses assuntos serão abordados de forma mais aprofundada em capítulos 
posteriores.

A principal vantagem da forma de representação em linguagem algorítmica 
está na facilidade com a qual um pseudocódigo pode ser transcrito para uma 
linguagem de programação. Assim como os fluxogramas, a desvantagem fica por 
conta da limitação do seu poder de expressão, devido às regras impostas 
para a elaboração das instruções.

=== Recapitulando
Neste capítulo você estudou algoritmos, suas principais características e 
suas formas de representação. 

Apesar de ser um tema mais abordado na ciência da computação, algoritmos 
estão presentes nas mais diversas áreas e em várias atividades do cotidiano. 
Lidamos com eles, por exemplo, quando tomamos banho, cozinhamos, planejamos 
uma rota para fugirmos do trânsito, consultamos um manual de montagem, enfim, 
sempre que nos deparamos com um conjunto lógico de passos para realizarmos uma 
tarefa ou solucionarmos um problema, estamos em contato com algoritmos. É por 
meio deles que os computadores passam a ilusão de que são inteligentes, 
realizando tarefas capazes de impressionar qualquer ser humano. No entanto, 
sabemos que eles apenas processam dados, segundo um conjunto de instruções 
que lhe são passadas -- os algoritmos.

Você viu que os algoritmos computacionais, aqueles elaborados para serem 
executados em computadores, devem ser claros, ter um número finito de passos, 
e que estes devem ser simples o suficiente para serem executados de maneira 
exata e em um tempo finito. Além disso, os algoritmos computacionais devem 
possuir zero ou mais entradas e uma ou mais saídas.

As formas de representação de algoritmos mais comuns são a linguagem 
algorítmica, o fluxograma e o pseudocódigo. Da primeira à última há uma 
aproximação em relação às linguagens de programação, ou seja, o 
pseudocódigo é a forma de representação que mais se assemelha às 
linguagens utilizadas na programação de computadores. Na direção inversa, 
há uma maior liberdade na elaboração de algoritmos, aumentando, assim, a 
capacidade de expressá-los.  

No próximo capítulo abordaremos o processo de tradução de um programa 
escrito em uma linguagem de alto nível, os paradigmas de programação 
existentes, e introduziremos os conceitos básicos da programação de 
computadores. Além disso, você terá o primeiro contato com a linguagem de 
programação a ser estudada neste livro: a linguagem C.


=== Atividades
. Explique, com suas próprias palavras, o que é algoritmo.
. Rotineiramente, usamos algoritmos para as mais diversas tarefas. Cite três 
algoritmos que podemos encontrar no dia a dia.
. Em que consiste a característica de efetividade de um algoritmo?
. Suponha que o quarto passo de um determinado algoritmo ordene que a 
execução retorne ao primeiro. Qual característica não está sendo 
satisfeita por esse algoritmo?
. Discorra sobre as formas de representação de algoritmos mais comuns, 
destacando suas vantagens e desvantagens.
. Suponha que você foi premiado com um robô capaz de auxiliá-lo nas tarefas 
domésticas. Antes que execute determinada atividade, você precisa instruí-lo 
corretamente através de um algoritmo específico. Sabendo disso, escreva 
algoritmos, em linguagem natural, para ensiná-lo a realizar cada uma das 
tarefas abaixo:
.. Trocar a lâmpada do seu quarto.
.. Trocar o pneu do seu carro.
.. Fazer uma vitamina de banana com açaí.
.. Lavar e secar os pratos.
.. Calcular quanto você precisar tirar na terceira nota para passar por média 
em Introdução à Programação.

. Escreva um algoritmo, utilizando fluxograma, que receba como entrada o peso e 
altura de uma pessoa, calcule seu IMC (Índice de Massa Corpórea) e exiba sua 
situação, segundo os seguinte critério:
+
Se o IMC ≥ 25, a pessoa está acima de seu peso, caso contrário, está 
abaixo. Onde o IMC = (Peso)/(Altura^2^)

. Usando fluxograma, faça um algoritmo que receba como entrada a idade de uma 
pessoa expressa em anos, meses e dias (Atenção: são 3 entradas) e mostre-a 
expressa apenas em dias. Considere anos de 365 dias e meses de 30 dias.
. Considere as instruções armazenadas na memória  a seguir:
+
image::images/algoritmos/memoria-exercicio.png[scaledwidth="50%"]
+
Considerando que a instrução inicial se encontra no endereço `0` (zero)  e as 
posições `8`, `9` e `10` correspondem a `x`, `y` e `z`, respectivamente, 
explique como funciona a execução das instruções acima, segundo a arquitetura 
de von Neumann. Antes da execução da instrução de endereço 2 `(z=x/y + z)`, a 
posição de memória referente a `z` possuía o valor `1` (um).

. Escreva um algoritmo, em pseudocódigo, que receba como entrada a base e a 
altura de um triângulo, calcule e exiba sua área.

