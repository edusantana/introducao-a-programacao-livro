== Introdução à Programação

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Entender o processo de tradução de programas escritos em linguagem de alto 
nível para código de máquina
* Compreender o conceito de variável e sua relação com a memória do 
computador
* Criar instruções que envolvam operações aritméticas
* Utilizar instruções de entrada e saída da linguagem C
* Escrever um programa simples em C
____________________

////
TODO - REV.00: Sugestão de melhoria para análise pelo autor - Comentário Geral
Seria interessante rever a estruturação desse capítulo como um todo. A impressão
é que o aluno sentirá uma certa dificuldade para entender devido a forma como
está estruturado. Como sugestão o livro poderia quebrar em capítulos como:
cap 01 - introdução ao algoritmo - descrevendo os conceitos básicos de algoritmo
cap 02 - linguagem algoritmica - descrevendo maiores detalhes sobre pseudocódigo (explicando conceitos básicos como estruturação, variáveis e etc)
cap 03 - introdução a programação - seria o capítulo corrente, tirando o conteúdo da linguagem C
cap 04 - A linguagem c  - introduzindo a linguagem c
cap 05 - ...
Também recomendaria adicionar um maior número de exemplos, ilustrações e exercícios comentados
no decorrer de todo capítulo.
////


////
TODO - REV.01: Dúvida sobre a ordem dos capítulos 
Ao iniciar a leitura fiquei em dúvida da ordem do capítulo, este
seria o 2 ou o 3? 
////

Agora que você já conhece as características de um algoritmo computacional e 
é capaz de criar algoritmos utilizando suas diferentes formas de 
representação, está na hora de você escrever seu primeiro programa. Porém, 
antes que isso ocorra, você deve aprender alguns conceitos básicos, como o 
de variável, e conhecer o processo de tradução de um programa 
escrito em linguagem de alto nível (a linguagem C, por exemplo) para código 
de máquina, ou seja, para a linguagem que o computador trabalha. Além desses 
conceitos, este capítulo também aborda a elaborações de expressões 
aritméticas em C, bem como alguns de seus comandos básicos.

=== Introdução

Você viu no capítulo anterior que existe uma linguagem que os computadores 
são capazes de compreender e que é utilizada na elaboração de algoritmos 
para instruí-los a executarem as mais diversas tarefas. Essa linguagem é 
chamada de linguagem de programação e consiste no principal assunto deste 
capítulo.

Assim como as linguagens naturais (português, inglês, espanhol, etc.), as 
linguagens de programação têm o objetivo de prover um meio eficaz de 
comunicação.  Elas são constituídas de um conjunto de palavras especiais 
(vocabulário), que associadas a um conjunto de regras de utilização, 
determinam como os algoritmos devem ser especificados para que possam ser 
corretamente decodificados pelo computador.

As linguagens de programação diferem das naturais de várias formas. 
Primeiramente, apesar de ser possível de serem utilizadas como meio de 
comunicação entre pessoas, seu principal propósito é possibilitar a 
comunicação entre uma pessoa e um computador.  Além disso, as linguagens 
naturais são mais tolerantes a erros. Um erro gramatical, por exemplo, não 
impossibilita uma conversa entre duas pessoas. Já no caso das linguagens de 
programação, a simples omissão de um ponto e vírgula é capaz até de 
impedir que a comunicação seja iniciada.

////
TODO - REV.02: Sugestão de melhoria para análise pelo autor 
Acho que o nome de área de conhecimento (l.63) como ciência da computação são 
sempre iniciadas em maiúscula. 
////

O conteúdo da comunicação por meio de uma linguagem de programação tem um 
significado especial para a ciência da computação. Enquanto que nos 
expressamos nas linguagens naturais através de textos e da emissão de sons, 
nas linguagens de programação nos expressamos através de programas, que nada 
mais são do que algoritmos escritos em uma linguagem de programação. O 
estudo das técnicas para elaboração de programas consiste em um dos pilares 
da ciência da computação, conferindo uma importância particular à 
disciplina de Introdução à Programação.

Antes que você conheça as peculiaridades de uma linguagem de programação 
estruturada, como suas principais instruções e regras para a construção de 
um programa, estudaremos os paradigmas de programação existentes e o processo 
de tradução de um programa escrito em linguagem de alto nível para um 
programa em código de máquina.

=== Níveis das Linguagens de Programação

Os computadores representam as informações através da manipulação de dois 
estados. Esse sistema de representação, denominado de sistema binário, 
decorre do fato da grande maioria dos componentes eletrônicos poder assumir 
apenas dois valores. Por exemplo, uma lâmpada pode estar no estado 
"ligado" ou "desligado", um capacitor pode estar "carregado" ou 
"descarregado" e um circuito elétrico pode estar energizado ou não.

A representação binária utiliza os algarismos "0" e "1", chamados de 
dígitos binários. Eles são os valores que um bit (menor unidade de 
informação em um computador) pode assumir e estão associados aos valores de 
tensão presentes nos circuitos elétricos do computador. Para representar o 
bit zero, por exemplo, normalmente utiliza-se um valor próximo a zero volts. 
Para o bit um, utiliza-se um valor um pouco maior, da ordem de poucos volts.

////
TODO - REV.03: Sugestão de melhoria para análise pelo autor 
É mais legível no decorrer do texto fazer referência ao identificador da legenda de figuras/quadros/tabelas,
ao invés de mencionar "o quadro abaixo" ou algo parecido. 
////

Repare que trabalhar com uma combinação de zeros e uns não é uma tarefa 
fácil para um ser humano. Para que você perceba a dificuldade, imagine como 
seria escrever um pseudocódigo substituindo comandos como "LEIA", 
"ESCREVA" e expressões aritméticas por uma combinação de zeros e uns. 
O quadro de código binário hipotético abaixo ilustra tal situação, 
apresentando um algoritmo em pseudocódigo 
que calcula a média de duas notas lidas da entrada padrão e sua versão 
hipotética em código binário. 


.Algoritmo em pseudocódigo
-------------
ALGORITMO 
DECLARE nota1,
        nota2, 
        M : NUMÉRICO
LEIA nota1
LEIA nota2
M <= (nota1 + nota2) / 2 
FIM_ALGORITMO.
-------------

////
TODO - REV.03: Sugestão de melhoria para análise pelo autor 
Seria interessante fazer referência cruzada entre os dois exemplos (ex. o código binário
representar hipoteticamente o código acima). 
////

.Ilustração de um código binário hipotético referente a um algoritmo escrito em pseudocódigo.
-------------
10100001
10100011 10010001
         10010010
         10010011 11000001
10100100 10010001
10100100 10010010
10010011 11110011 10010001 11110001 10010010 11110010 00000010
10100010
-------------

IMPORTANT: O código binário acima apresentado tem fins meramente 
didáticos, não sendo elaborado com base em nenhuma máquina real.


Com o intuito de tornar menos complicada, mais eficiente e menos sujeita a 
erros a tarefa de programar computadores, foram criadas linguagens de 
programação mais próximas às linguagens naturais. Elas são compostas de um 
conjunto de palavras-chave, normalmente em inglês, e símbolos que estabelecem 
os comandos e instruções que podem ser utilizados pelo programador na 
construção de seus programas.

As linguagens com essa característica são chamadas de linguagens de alto 
nível, ao passo que as mais próximas da linguagem de máquina 
(representação binária), são denominadas de linguagens de baixo nível. 
São exemplos de linguagens de alto nível: Pascal, C (linguagem abordada neste 
livro), Java, C++ e Python. Como exemplo de linguagem de baixo nível, temos a 
linguagem Assembly. 

////
TODO - REV.04: Sugestão de melhoria para análise pelo autor 
Seria interessante colocar aqui link para outras informações, ou curiosidades, e 
assim vai. 
////

=== Tradutores e Interpretadores

Se por um lado as linguagens de programação facilitam o trabalho dos 
programadores, por outro impossibilitam que os programas desenvolvidos nessas 
linguagens sejam compreendidos pelos computadores, visto que eles são capazes 
de manipular apenas códigos binários. Dessa forma, os cientistas do passado 
se depararam com o seguinte desafio: como executar um programa em linguagem de 
programação, seja ela de baixo ou alto nível, em um computador que trabalha 
apenas como números binários?

À primeira vista, o desafio em questão parece ser complexo demais para ser 
solucionado por um iniciante na ciência da computação. Todavia, você vai 
perceber que a solução para o problema está mais próxima da sua realidade 
do que imagina. Suponha que você recebeu uma proposta milionária para 
trabalhar em uma empresa de desenvolvimento de software da China. Seus patrões 
pagarão suas passagens, hospedagem, transporte e todo o aparato necessário 
para que você possa ter uma vida tranquila no país asiático. Apesar de a 
proposta ser atraente, existe um problema: todos os funcionários da empresa 
falam somente o chinês, inclusive seus patrões. Além disso, o contrato a ser 
assinado também está escrito em chinês. O que você faria em tal situação? 

////
TODO - REV.05: Sugestão de melhoria para análise pelo autor 
A resposta a pergunta realizada (l.189) pode ser reescrita de uma forma mais
suave, como: "Recusaria a proposta? Certamente não, pois uma solução possível seria utilizar
um tradutor para resolver o problema. 
////

Recusaria a proposta? É isso mesmo que você está pensando, um tradutor seria 
a solução para seus problemas.

Do mesmo modo que você precisaria de um tradutor para poder lidar com uma 
linguagem que não consegue entender, os computadores também necessitam de um 
tradutor para traduzir um programa escrito em linguagem de programação para 
um programa correspondente em linguagem de máquina. Dois softwares básicos 
são responsáveis por realizar a tradução em questão: os tradutores e os 
interpretadores.

////
TODO - REV.06: Sugestão de melhoria para análise pelo autor 
Sugeriria adicionar figuras para ilustrar o texto apresentado abaixo
também. 
////

Os tradutores podem ser classificados como montadores e compiladores. Quando o 
processo de tradução converte um programa que se encontra no nível de 
linguagem de montagem (representação simbólica da linguagem de máquina, 
ex.: linguagem Assembly) para a linguagem de máquina, o tradutor utilizado é 
o montador. Já na tradução de programas em linguagem de alto nível para a 
linguagem de montagem, o software responsável é o compilador. Perceba que 
não há tradução direta da linguagem de alto nível para a linguagem de 
máquina. Para que esta seja alcançada, são necessários vários passos 
intermediários, sendo um deles a tradução para a linguagem de montagem. 

[[fig_compilacao_passos]]
.Passos no processo de compilação
image::images/introducao-a-programacao/compilacao-passos.png[]

No processo de compilação, cada parte de um programa (módulo) escrito em 
linguagem de alto nível é traduzido para um módulo objeto diferente, que 
consiste em sua representação em linguagem de montagem. Esse passo no 
processo de compilação corresponde ao passo 1 da <<fig_compilacao_passos>>. Antes de serem 
traduzidos para linguagem de máquina pelo montador, é necessário que os 
vários módulos objetos sejam integrados de modo a formarem um único código. 
Essa tarefa é realizada no passo 2. O passo 3 é o responsável por carregar o 
programa na memória, a fim de tornar suas instruções prontas para serem 
executadas pelo processador.

Os interpretadores, além de realizar a tradução de um programa para a 
linguagem de máquina, ainda executam suas instruções. Assim que traduz uma 
instrução, ela é imediatamente executada, gerando assim um ciclo de 
tradução e execução que prossegue de instrução a instrução até o fim 
do programa (<<fig_interpretacao>>).

[[fig_interpretacao]]
.Processo de Interpretação
image::images/introducao-a-programacao/interpretacao.png[]

Por não traduzir um programa escrito em linguagem de alto nível diretamente 
para linguagem de máquina, o processo de compilação tende a ser mais rápido 
que o processo de interpretação. Além disso, uma vez compilado, um programa 
pode ser executado várias vezes sem a necessidade de haver uma recompilação. 
 Já na interpretação, cada vez que um programa tiver que ser reexecutado, 
todo o processo de interpretação deverá ser refeito, independente de ter 
ocorrido modificações no código fonte do programa desde sua última 
execução. A vantagem da interpretação fica por conta da possibilidade de 
testar os programas ao mesmo tempo em que são desenvolvidos. 

IMPORTANT: A linguagem utilizada neste livro (linguagem C) como ferramenta para iniciá-lo 
na programação de computadores é uma linguagem compilada, portanto, os 
programas que você irá desenvolver passarão pelos passos explanados 
anteriormente.

// XXX Como manter as referencias aos outros livros da coleção consistente?

NOTE: Para saber mais sobre o processo de montagem e compilação, leia a Seção 3 
do Capítulo 5 do Livro de Introdução ao Computador.

////
TODO - REV.07: Sugestão de melhoria para análise pelo autor 
Não haveria outros materiais que pudessem ser adicionados como links ou curiosidades?
////

=== Paradigmas de Programação

////
TODO - REV.08: Sugestão de melhoria para análise pelo autor 
É importante deixar mais suave para o leitor a transição de uma seção para a outra.
Perceba que saímos de uma seção que explica os compiladores e interpretadores e caímos, de repente,
em outra, que explica paradigmas. Que relação temos com os dois assuntos? Por que, eu como aluno, preciso
saber disso mesmo? Que relação há com o ato de programar? Parece blá blá, mas para o aluno que 
está lendo e aprendendo sozinho faz uma diferença grande, pode ter certeza.
////

Um paradigma de programação está relacionado com a forma de pensar do 
programador na construção de soluções para os problemas com os quais se 
depara. Programar seguindo um determinado paradigma de programação significa 
representar soluções a partir de uma forma particular de raciocinar na 
elaboração dos algoritmos. Como os paradigmas mencionados sustentam a 
atividade de programas, eles influenciam todo o processo de desenvolvimento de 
software. Alguns dos paradigmas de programação mais utilizados estão 
relacionados abaixo:

////
TODO - REV.09: Sugestão de melhoria para análise pelo autor 
Foi explicado o que é uma variável?
////

Paradigma imperativo:: Representa a computação como ações, enunciados ou 
comandos que alteram o estado (variáveis) de um programa. Consiste na 
elaboração de programa a partir de comandos que dizem o que o computador deve fazer 
a cada momento.

Paradigma estruturado:: Soluciona problemas a partir de sua quebra em problemas 
menores, de mais fácil solução, denominados de sub-rotinas ou subprogramas. 
Normalmente, o trabalho de cada sub-rotina consiste em receber dados como 
entrada, processar esses dados e retornar o resultado do processamento para o 
módulo de software que o executou. Este paradigma ainda defende que todo 
processamento pode ser realizado pelo uso de três tipos de estruturas: 
sequencial, condicional e de repetição. É o paradigma adotado neste livro.

Paradigma declarativo:: Descreve as características da solução desejada sem 
especificar como o algoritmo em si deve agir. Em contraste com o paradigma 
imperativo, que informa ao computador como as instruções devem ser 
executadas, o paradigma declarativo preocupa-se apenas em definir o que deve 
ser feito, deixando a cargo de outros softwares decidirem como alcançar a 
solução descrita. É bastante utilizado no desenvolvimento das páginas web 
(linguagem html) e na descrição de documentos multimídia através da 
linguagem Nested Context Language – NCL, adotada pelo padrão brasileiro de 
TV Digital. 

Paradigma orientado a objetos:: Enxerga o problema como uma coleção de objetos 
que se comunicam por meio da troca de mensagens. Os objetos são estruturas de 
dados que possuem estado (variáveis) e comportamento (lógica). 

////
TODO - REV.10: Sugestão de melhoria para análise pelo autor 
Aqui nesse ponto também seria interessante ter seções "Para saber mais..." ou 
links e gravuras que ilustram um pouco mais o que está sendo explicado.
////

=== Linguagem C

////
TODO - REV.11: Sugestão de melhoria para análise pelo autor 
Sugeriria que a explicação da linguagem C fosse em um capítulo a parte.
////

A linguagem C foi desenvolvida por Dennis Ritchie, entre os anos 1971 e 1973, 
nos laboratórios da AT&T. O objetivo de Ritchie era criar uma linguagem para a 
implementação de sistemas operacionais e softwares básicos que combinasse a 
eficiência das linguagens de baixo nível com características das linguagens 
de alto nível, como legibilidade, portabilidade e manutenibilidade.

////
TODO - REV.12: Sugestão de melhoria para análise pelo autor 
Sugeriria deixar os detalhes do processo evolutivo da linguagem C como parte 
de seções "Para saber mais..." ou algo assim. Estamos tratando de um aluno iniciante
a distância e de repente colocamos várias informações que para ele, no momento, seria
sobrecarga.
////

A criação da linguagem C é resultado de um processo evolutivo de linguagens, 
iniciado com uma linguagem chamada BCPL, desenvolvida por Martin Richards. Essa 
linguagem influenciou a linguagem B, inventada por Ken Thompson, que por sua 
vez levou ao desenvolvimento de C.

////
TODO - REV.13: Sugestão de melhoria para análise pelo autor 
Caso seja realmente julgado necessário citar o Unix é interessante dizer que se trata
de um sistema operacional e adicionar link para "maiores informações ou para saber mais..".
////

Em 1973, Dennis Ritch não deixou dúvidas que seu objetivo foi alcançado, 
desenvolvendo eficientemente parte do sistema Unix na linguagem C. A partir de 
meados dos anos 80, C começou a ganhar popularidade e, devido à sua 
flexibilidade em atuar com características de linguagens de alto e baixo 
nível, foi reconhecida como uma linguagem de propósito geral, sendo utilizada 
na implementação de uma grande variedade de sistemas.

Devido à importância auferida na área da programação de computadores, C é 
hoje uma das linguagens mais utilizadas em cursos de programação do mundo 
inteiro. Sendo assim, ela é a linguagem que guiará você na compreensão das 
nuances da arte de programar e servirá como ferramenta para elaboração dos 
seus primeiros programas. A linguagem C será apresentada, de forma 
conveniente, a partir da próxima seção.

=== Núcleo de um programa

////
TODO - REV.14: Sugestão de melhoria para análise pelo autor 
Para ser mais didático não haveria como correlacionar o núcleo do programa
com o que já foi apresentado em linguagem algoritmica? Sinto que Precisamos ser mais
didático nas explicações.
////

A organização da sequência de instruções em um programa obedece a um 
conjunto de regras estabelecidas pela linguagem de programação. Um programa 
em C é estruturado em funções, que são, basicamente, trechos de código que 
podem ser chamados várias vezes para realizar uma certa tarefa. Assim, todas 
as instruções pertencentes a um programa em C devem estar contidas em uma 
função.

Além de ser um meio de agrupar trechos de um código, uma função em 
programação tem características semelhantes a uma função matemática, no 
sentido de que recebe parâmetros como entrada (seria o domínio da função) e 
retorna um valor como saída (imagem).

Em C existe uma função especial, denominada de `main` (principal), que 
determina o início e o fim da execução de um programa. De forma mais 
específica, a execução de um programa tem seu início com a execução da 
primeira instrução da função `main` e termina com a execução da sua 
última instrução. Dessa maneira, todo programa em C deve possuir tal 
função.

IMPORTANT: Você conhecerá mais sobre as funções no Capítulo 6 deste 
livro. Por enquanto é necessário apenas que você saiba que todo programa em 
C deve ter uma função `main` e que a execução de um programa inicia e termina 
com a execução de seus comandos.

////
TODO - REV.15: Sugestão de melhoria para análise pelo autor 
Diga apenas que iniciaremos nosso estudo com um programa simples... evite 
os advérbios, pois haverá aluno que ainda não entenderá o exemplo mesmo sendo simples.
////

Iniciaremos nosso estudo com um programa extremamente simples, que apenas 
imprime uma mensagem na tela:

////
TODO - REV.16: Sugestão de melhoria para análise pelo autor 
Colocar uma representação mais abstrata de como um programa em c  é estruturado, tipo
o que normalmente é apresentado quando quando se inicia o estudo de uma linguagem 
algoritmica, informando por exemplo, a estrutura em blocos de um programa c.

Outro ponto é verificar se está realmente aparecendo a numeração das linhas que 
apresentam o código. Na versão html não está aparecendo.
////

[source, c]
----------------
#include <stdio.h>

int main() {
   printf("Meu primeiro programa!");
   return 0;
}
----------------

Analisemos o que ocorre em cada linha de código:

  #include <stdio.h>

Esta linha de código solicita ao compilador que inclua no programa a 
biblioteca padrão para comandos de entrada e saída da linguagem C. Uma 
biblioteca consiste em um conjunto de arquivos que contém funções que podem 
ser incorporadas a outros programas. Neste caso, a inclusão da biblioteca 
`stdio.h` permite que o programa utilize suas funções para ler dados da entrada 
padrão (teclado) e para escrever dados na saída padrão (tela).

(((Entrada padrão))) (((Saída padrão)))

 int main(){

Com esta linha de código definimos a função `main` e demarcamos o seu início 
com o caractere `{` (abre-chaves). Todo conteúdo de uma função em C fica 
delimitado por chaves ( `{}` ).

 printf("Meu primeiro programa!");

O programa tem seu início com a execução desta instrução, uma vez que ela 
é a primeira instrução da função `main`. 

A função `printf` tem a finalidade de escrever na tela os dados recebidos por 
parâmetro.  Como resultado de sua execução, neste caso, será exibida a 
frase "Meu primeiro programa!" no canto superior esquerdo do monitor do 
computador.

O ponto-e-vírgula no fim da instrução serve para separar esta instrução da 
próxima, dessa maneira, cada instrução deve terminar com sua utilização.

 return 0;

Essa instrução encerra a execução do programa, de modo que deve ser sempre 
a última da função `main` (antes do fecha-chaves, é claro).  O número 0 
(zero) serve para indicar ao sistema operacional que o programa terminou com 
sucesso (números diferentes de zero indicariam um erro). Você entenderá 
melhor como isso funciona quando abordarmos detalhadamente as funções, no 
capítulo 6.

=== Memória e Variáveis

A memória principal do computador ou memória RAM (<<fig_memoria_ram>>) é constituída 
por componentes eletrônicos capazes de armazenar dados. Cada dígito binário 
(0 ou 1) ocupa uma porção de memória chamada de bit, e um conjunto de 8 bits 
é denominado de byte. A memória é dividida em células de memória de um 
byte de tamanho, que podem ser acessadas a partir de um número único que as 
identifica de forma particular. Esse número é chamado de endereço e tem a 
mesma função que os endereços de nossas casas, que é identificar de forma 
única nossas residências, a fim de possibilitar o envio e o recebimento de 
correspondências. No caso do computador, as correspondências são os dados 
que serão armazenados nas células de memória.


[[fig_memoria_ram]]
.Figure 2.3: Memória RAM.
image::images/introducao-a-programacao/memoria.png[]

Uma variável em programação representa, através de símbolos, o conteúdo 
de uma célula ou posição de memória. Por exemplo, se uma variável de nome 
`x` possui o valor 10, significa dizer que a posição de memória, representada 
pelo símbolo `x`, armazena o valor 10. Em programação, podemos enxergar a 
memória como um conjunto de posições que possuem um endereço e uma 
representação simbólica (variável), como ilustrado na <<fig_memoria_representacao>>.

[[fig_memoria_representacao]]
.Representação da memória em função dos endereços, das posições de memória e das variáveis. 
image::images/introducao-a-programacao/memoria-representacao.png[]

////
TODO - REV.17: Sugestão de melhoria para análise pelo autor 
Talvez fosse interessante mencionar que as regras para nomes de variáveis
dependem da linguagem de programação.
////

NOTE: As variáveis podem ter nomes diversos, desde símbolos comuns na 
matemática, como é o caso das variáveis `x`, `y` e `z`, até nomes como `var`, 
`endereco`, `cpf`, etc. As regras para dar nome às variáveis serão 
apresentadas na próxima seção. Perceba também que os valores que as 
variáveis podem armazenar não se limitam apenas a valores numéricos 
inteiros. Elas podem armazenar, por exemplo, um conjunto de caracteres, como é 
o caso da variável `z`, e valores fracionários, como é o caso das variáveis `y` 
e `var`.

==== Identificadores 

Os nomes que damos às variáveis, rotinas, constantes e demais componentes num 
programa escrito numa dada linguagem de programação são chamados de 
identificadores. Na seção anterior, por exemplo, utilizamos os 
identificadores `x`, `y`, `z` e var para dar nome às variáveis da <<fig_memoria_representacao>>. 
As palavras que possuem significado especial nas linguagens de programação, como 
é o caso dos nomes dados às estruturas de controle (`for`,  `while`, `if`, etc.),  
tipos de variáveis, dentre outros, são chamadas de palavras-chave.

As regras básicas para formação de identificadores são:

* Os caracteres utilizados são os números, letras maiúsculas, minúsculas e o 
caractere especial sublinha (_);

* O primeiro caractere deve ser uma letra ou o sublinha;

* Não são permitidos espaços em branco;

* Palavras reservadas não podem ser utilizadas como identificadores.

Abaixo, alguns exemplos de identificadores válidos:

---------------
B
b
X2
computacao
COMPUTACAO
nota1
nota_2
cpf
RG
---------------

Identificadores inválidos:

---------------
3B -> Não pode começar com número.
X 2 -> Não pode conter espaço em branco.
Computaçao -> Não é permitido utilizar o caractere cedilha.
COMPUTACÃO -> Caracteres especiais como o til (~) não são permitidos.
while -> while é uma palavra reservada.
function -> function também é uma palavra reservada.
---------------

////
TODO - REV.17: Sugestão de melhoria para análise pelo autor 
Explicar o porquê dessa boa prática, isto é, informar que melhora
a legibilidade do código.
////

Uma boa prática de programação é escolher nomes que indiquem a função de 
uma variável, como por exemplo: `soma, ano, idade, media, dataNascimento, 
numero_filhos, nota1, nota2, notaFinal, salario,` etc. Também é uma prática 
bastante difundida iniciar os identificadores com letras minúsculas e usar 
letras maiúsculas ou sublinha para separar palavras. Por exemplo, para 
escolher um identificador para uma variável que deve armazenar a data de 
nascimento de uma pessoa, as duas opções citadas correspondem à 
`dataNascimento` e `data_nascimento`, respectivamente.

////
TODO - REV.18: Sugestão de melhoria para análise pelo autor 
Sugeriria fornecer outro exemplo ao invés de var e Var, simplesmente para evitar
confusões.
////

IMPORTANT: A linguagem C faz distinção entre letras maiúsculas e minúsculas, sendo 
assim, variáveis de nomes var e Var são consideradas como duas variáveis 
diferentes.

==== Tipos de dados primitivos

Vimos anteriormente que as variáveis podem armazenar valores de diversos 
tipos, tais como números inteiros, fracionários e um conjunto de caracteres.  
Os tipos de dados ou tipo de variáveis são representados de forma diferente 
em cada linguagem de programação, algumas dando suporte a mais tipos que 
outras. Embora haja certa variação de uma linguagem para outra, a maioria 
delas dá suporte a um grupo de tipos básicos, incorporados na própria 
linguagem, chamados de tipos primitivos. Em C há a possibilidade da criação, 
por parte do programador, de tipos particulares, denominados de tipos 
derivados. Estudaremos as formas de definirmos tipos derivados no Capítulo 5. 

Existem três tipos primitivos na linguagem C: números inteiros, números de 
ponto flutuante (números fracionários) e caracteres. Os números 
fracionários são chamados de números de ponto flutuante devido à forma como 
eles são armazenados no computador. Portanto, sempre que você ouvir o termo 
ponto flutuante, tenha em mente que o tipo de dados em questão diz respeito 
aos números fracionários. 

////
TODO - REV.19: Sugestão de melhoria para análise pelo autor 
Adiciona exemplo dos tipos mencionados.
////

Os tipos de dados primitivos em C estão descritos na tabela abaixo:

.Tipos primitivos da linguagem C
[width="90%",cols="^1m,^2,4",frame="topbot",options="header,footer"]
|======================
|Tipo|Tamanho (em bytes)|Função
| int|4|Armazenar um número inteiro.
| float|4|Armazenar números de ponto flutuante.
| double|8|Armazenar números de ponto flutuante com maior precisão.
| char|1|Armazenar um caractere.
|======================

Como as variáveis de tipos primitivos distintos são representadas na memória 
de formas diferentes, elas exigem uma quantidade de bytes distinta para seu 
armazenamento. Uma variável do tipo *int*, por exemplo, ocupa normalmente quatro 
bytes na memória, ao passo que uma variável do tipo *char* ocupa apenas 1 (um) 
byte.  

É importante salientar que o tipo *char* na linguagem C, diferentemente de 
outras linguagens, pode também armazenar números inteiros que requerem apenas 
um byte de memória. O que ocorre é que há uma correspondência entre um 
caractere e um número inteiro, conforme uma tabela padrão. Por exemplo, 
quando atribuímos a variáveis do tipo *char* valores como a, b e c, na verdade 
estamos atribuindo os valores inteiros 97, 98 e 99. Os números inteiros que 
correspondem aos caracteres estão todos listados em uma tabela padrão, 
conhecida como tabela ASCII. 

////
TODO - REV.20: Sugestão de melhoria para análise pelo autor 
Adiciona exemplo dos tipos mencionados.
////

O tipo int pode ainda ser qualificado de acordo com as seguintes palavras-chave:

short ou long:: se referem ao tamanho das variáveis;

signed ou unsigned:: indicam, respectivamente,  se as variáveis do tipo *int* 
poderão ser positivas e negativas (com sinal) ou apenas positivas (sem sinal) .

A qualificação de tipo é realizada quando os qualificadores são antepostos 
aos tipos. Por exemplo, uma variável do tipo *unsigned long int* armazena 
inteiros positivos de tamanhos grandes, enquanto que uma variável do tipo 
*signed short int* armazena inteiros positivos e negativos de tamanhos menores.

A tabela a seguir ilustra os valores que normalmente podem ser armazenados nas 
variáveis do tipo *int* e diversas de suas variações.


.Intervalos de valores de tipos inteiros utilizados por grande parte dos compiladores de C.
[width="100%",cols="^2,^2,3",frame="topbot",options="header"]
|======================
|Tipo|Tamanho (em bytes)|Valores que podem ser armazenados
| int|4|-2^31^ a 2^31^ - 1
| short int|2|-2^15^ a 2^15^ - 1
| long int|4|-2^31^ a 2^31^ - 1
| unsigned int|4|0 a 2^32^ - 1
| unsigned short int|2|0 a 2^16^ - 1
| unsigned long int|4|0 a 2^32^ - 1
| signed char|1|-2^7^ a 2^7^ - 1
| unsigned char|1|0 a 2^8^ - 1
| long long int|8|-2^63^ a 2^63^ - 1
| unsigned long long int|8|0 a 2^64^ - 1
|======================


NOTE: Os tamanhos e valores presentes nas tabelas anteriores podem variar de 
compilador para compilador. Desse modo, eles servem apenas como um guia de 
referência para de norteá-lo na escolha dos tipos adequados aos programas que 
você desenvolverá.  

==== Declaração de variáveis

Cada variável utilizada na elaboração de um programa precisa ser definida 
com antecedência.  Para isso, o programador precisa definir o identificador da 
variável e o seu tipo por meio do que chamamos de declaração de variáveis. 
Sua forma geral é a seguinte:

 tipo_da_variável identificador;

O exemplo a seguir declara, na linguagem C, as variáveis x e y como sendo do 
tipo *int*.

 int x, y;

 ////
TODO - REV.21: Sugestão de melhoria para análise pelo autor 
Não seria interessante ilustrar a explicação abaixo com uma gravura?
////

A declaração de variáveis, além de estabelecer uma interpretação sobre os 
bits armazenados na memória, também é responsável por alocar espaço para 
armazenamento desses bits. No exemplo anterior, a declaração das variáveis `x` 
e `y` resulta na alocação de 4 bytes (provavelmente) para cada uma delas, bem 
como determina que os bits a serem armazenados no espaços alocados deverão 
ser interpretados como números inteiros. Seguem abaixo alguns exemplos de 
declarações de variáveis:

 int idade;
 int numeroFilhos;
 int dia, mes, ano;
 float altura;
 float nota, media;

Os tipos das variáveis tem uma relação muito próxima com a função que 
elas exercem em um programa. Caso precisemos armazenar e realizar cálculos 
sobre a idade de alguém, deveremos declarar a variável `idade` como *int*, visto 
que a idade corresponde a um número inteiro positivo. Do mesmo modo, como 
sabemos que a altura de uma pessoa é um número fracionário (ex.: 1,80 cm), 
devemos declarar a variável `altura` como sendo do tipo *float*. Variáveis do 
mesmo tipo podem ser declaradas em uma mesma linha, sendo separadas por 
vírgulas, como na declaração das variáveis  `dia`, `mes` e `ano` do exemplo 
anterior. Já variáveis de tipos diferentes devem ser declaradas 
obrigatoriamente de forma separada.

Um programa elaborado com base no paradigma estruturado pode ser visto como uma 
sequência de transições de estado do início até o fim de sua execução. 
Se pudéssemos tirar uma "foto" da execução de um programa em determinado 
momento, o que observaríamos seria o conjunto de suas variáveis e os valores 
nelas armazenados no momento, isto é, o estado do programa. Se os programas 
podem mudar de estado, então deve existir um comando nas linguagens de 
programação que permitam alterar o conteúdo de uma variável. Tal comando é 
denominado de *atribuição*, e o exemplo a seguir mostra como ele é utilizado 
em pseudocódigo.

////
TODO - REV.22: Sugestão de melhoria para análise pelo autor 
Note que agora utilizamos de explicações da linguagem algoritmica para fazer
a correlação com a linguagem de programação C. Este talvez fosse um recurso mais
didático.
////

 idade ← 18

Essa instrução deve ser lida como "a variável `idade` recebe o valor 18 
(dezoito)". Em C, o comando correspondente é:

 idade = 18;

NOTE: Podemos utilizar o comando de atribuição no momento da declaração de uma 
variável. Esse procedimento é chamado de inicialização de variáveis.

// FIXME Equação x pertence aos reais

Embora C e outras linguagens de programação utilizem o operador aritmético 
da igualdade para representar a atribuição, as semânticas de ambos não 
podem ser confundidas. Por exemplo, em matemática a equação 
`x=x+1`, onde `x pertece aos Reais`, nunca 
pode ser satisfeita, visto que um número real não poder ser igual a ele 
próprio mais um. Já em programação, o comando `x = x + 1` quer dizer que a 
variável `x` irá receber o conteúdo armazenado nela própria mais um. Supondo 
que `x` possuía conteúdo igual a 10 antes da execução da atribuição em 
questão, após sua execução `x` seria igual a 11 (`x = 10 + 1 = 11`). A tabela 
abaixo ilustra o cenário apresentado.


[width="50%",cols="^1m,^1m",frame="topbot",options="header"]
|======================
|Comando       |Valor atual de x
| `int x;`     |Indefinido
| `x = 10;`    |10
| `x = x + 1;` |11
|======================



Essa forma de atribuição é um artifício bastante empregado na 
programação, sendo denominado de *incremento*.

==== Constantes simbólicas

(((Constantes)))

Muitas vezes declaramos algumas variáveis que não devem ser modificadas 
durante a execução de um programa. É o caso das variáveis abaixo:

 PI = 3.14159;
 ACELERACAO_GRAVIDADE = 9.8;
 VELOCIDADE_LUZ = 300000;

(((Constantes simbólicas)))

Não faz sentido alterar o valor de uma variável que representa a aceleração 
da gravidade, por exemplo, pois o valor da constante gravitacional, como seu 
próprio nome já diz, permanece sempre o mesmo. Para casos como esse é 
preferível que usemos *constantes simbólicas* no lugar de variáveis. A 
linguagem C permite que um identificador seja associado a uma constante 
através da diretiva `#define`, cuja sintaxe é descrita abaixo: 

 #define nome_constante valor_constante;

Dessa forma, a definição da constante `PI` mencionada acima poderia ser 
realizada através da linha de código:

 #define PI = 3.14159;

Quando o programa que contém essa instrução é compilado, o compilador 
substitui todas as ocorrências de `PI` pelo seu valor associado. 

Outra utilidade proveniente da definição de constantes diz respeito à 
facilidade de modificação de um programa. Imagine que você desenvolveu 
um programa para o registro contábil de uma locadora de veículos e que em 
vários trechos de código você usou o valor da diária de locação para 
realizar diversos cálculos. Suponha agora que o dono da locadora aumentou o 
valor da diária de locação e que você foi chamado para modificar o programa 
a fim de adequá-lo ao novo valor. Dessa forma, você terá que alterar cada 
ocorrência contendo o valor antigo e o seu trabalho será proporcional ao 
número de ocorrências desse valor. Utilizando constantes simbólicas, você 
precisaria apenas alterar a definição da constante, conforme sugere o quadro 
abaixo:

 #define VALOR_LOCACAO 80.0
 #define VALOR_LOCACAO 100.0

Apesar das regras para definição dos nomes das constantes simbólicas serem 
as mesmas daquelas utilizadas para identificadores, é uma boa prática de 
programação defini-las com letras maiúsculas, separando as palavras que as 
compõem, se houverem, pelo caractere sublinha (`_`).

=== Comentários e indentação

À medida que um programa cresce, ele vai ficando cada vez mais difícil de ser 
lido e consequentemente de ser entendido. É comum um programador ter grandes 
dificuldades para compreender seus próprios programas após passar alguns dias 
sem trabalhar em suas linhas de código. Por isso, algumas medidas devem ser 
tomadas no sentido de preparar um código-fonte legível. Existem várias 
formas de aprimorar a legibilidade de um programa, contudo nos restringiremos 
aos comentários e à indentação. 

Explicar o código-fonte em linguagem natural é uma estratégia óbvia para 
facilitar sua compreensão. Esse é o papel dos comentários em uma linguagem 
de programação. Em C, qualquer sequência de caracteres localizada entre os 
delimitadores `/*` e `*/` é um comentário. Por exemplo:

 z = x + y; /* z é o resultado da soma entre x e y. */

A explicação da linha de código acima, embora desnecessária devido à 
simplicidade da instrução, é um comentário na linguagem C. Outras 
linguagens podem usar delimitadores distintos para expressar os comentários. A 
linguagem C ainda possui o delimitador //, muitas vezes chamado de delimitador 
de comentário de linha. Os caracteres colocados à sua frente e na mesma linha 
em que ele se encontra são considerados comentários e ignorados pelo 
compilador. Exemplo de sua utilização:

 int idade; // Variável inteira para representar
            // a idade de  uma pessoa.

Perceba que para comentar mais de uma linha com o delimitador //, precisamos 
utilizá-lo em cada linha que se deseja comentar. Dessa maneira, quando se 
deseja comentar mais de uma linha é mais adequado o uso dos delimitadores 
`/*` e `*/`.

Outra forma de tornar um programa mais legível é organizar as instruções de 
modo a refletir a hierarquia entre elas. Por exemplo:

[source, c]
-----------------
#include <stdio.h>

/* Código não-indentado */
int main() {
int x, y, z;

x = 10;
y = 2;
z = x / y;

if (x > 5) {
printf("x é maior que cinco.");
}

return 0;
}
-----------------

(((indentação)))
Repare que a declaração de variáveis, os comandos de atribuição e os 
comandos `if` (apresentado no Capítulo 3)  e `return` estão todos dentro da 
função `main`. Dizemos então que eles são hierarquicamente subordinados à 
função referida. Da mesma forma, o comando `printf` está subordinado ao 
comando `if`. Uma maneira de destacar a hierarquização das instruções é 
alinhar os comandos com o mesmo nível de hierarquia (inserindo espaços nas 
instruções de nível inferior), o que chamamos de *indentação*. Para que 
você visualize o resultado do processo de indentação, considere o código do 
exemplo anterior depois de corretamente indentado:

[source, c]
-----------------
#include <stdio.h>

/* Código indentado */
int main() {
   int x, y, z;

   x = 10;
   y = 2;
   z = x / y;

   if (x > 5) {
      printf("x é maior que cinco.");
   }

   return 0;
}
-----------------

=== Matemática Básica

O computador foi criado com o intuito inicial de realizar contas. Portanto, é 
importante que saibamos como instruí-lo a computar as operações aritméticas 
básicas. E essa não vai ser uma tarefa difícil, já que as expressões 
aritméticas em programação são bastante semelhantes às expressões 
utilizadas na matemática. Em C, os operadores matemáticos utilizados são os 
seguintes:


.Operadores aritméticos
[width="50%",cols="^1,^1",frame="topbot",options="header"]
|======================
|Operador |Operação
| `+`        |Adição
| `-`        |Subtração
| `*`        |Multiplicação
| `/`        |Divisão
| `%`        |Resto da divisão
|======================

A utilização dos operadores em C ocorrem da forma com a qual estamos 
acostumados: colocamos um operador entre dois operandos e vamos construindo as 
expressões. À medida que as expressões vão ficando mais complexas, podemos 
utilizar os parênteses para agrupar operadores e operandos. Diferentemente do 
que ocorre na matemática, em C não se utilizam colchetes e chaves para o 
agrupamento de expressões que já estão entre parênteses. Estes devem ser os 
substitutos dos primeiros quando houver necessidade. Por exemplo, a expressão 
matemática `[(x+y)-(a+b)]÷2`, em C se tornaria: 

 ((x+y)-(a+b))/2

Veja alguns exemplos de como os operadores aritméticos devem ser usados em C 
(os resultados são apresentados ao lado de cada operação):

////
TODO - REV.23: Sugestão de melhoria para análise pelo autor 
Recomendaria colocar comentários mais representativos. Além de facilitar
o entendimento dos exemplos, damos o exemplo em praticar o que estamos
dando como boa prática.
////

[source, c]
-----------------
 x = 4 * 5; // 20
 x = x / 2; // 10
 y = x % 4; // 2
 z = x * y – 5; // 15 
 z = x * (y – 5); // -30
 z = ((2 + 3) * 4 – 2)/2; // 9
-----------------

A precedência dos operadores aritméticos, isto é, a ordem em que eles são 
avaliados, pode ser alterada do mesmo modo que o fazemos quando tralhamos com 
expressões na matemática: utilizamos os parênteses para que algumas 
operações sejam realizadas antes que outras. É o que ocorre na expressão 
acima na expressão `z=x*(y-5)`. Caso os parênteses fossem omitidosfootnote::[Expressão resultante: `z=x*y-5`], a primeira 
operação a ser realizada seria a que multiplica `x` por `y`, depois, do seu 
resultado seria subtraído cinco. Com a inserção dos parênteses, ocorre 
primeiro a subtração para depois ser realizada a multiplicação. 

A linguagem C possui ainda operadores especiais que resultam da combinação de 
operadores aritméticos com operadores de atribuição. São eles:

////
TODO - REV.24: Sugestão de melhoria para análise pelo autor 
Recomendaria adicionar exemplos das operações apresentadas abaixo.
////

.Operadores aritméticos de atribuição e operadores de incremento.
[width="60%",cols="^1m,^2m",frame="topbot",options="header,footer"]
|======================
|Operador |Operação equivalente
| `x += y` | `x = x + y`
| `x -= y` | `x = x - y`
| `x *= y` | `x = x * y`
| `x /= y` | `x = x / y`
| `x %= y` | `x = x % y`
| `x++` | `x = x + 1`
| `++x` | `x = x + 1`
| `x--` | `x = x - 1`
| `--x` | `x = x - 1`
|======================

(((atribuição)))(((incremento)))

Os primeiros cinco operadores são denominados de *operadores aritméticos de 
atribuição*, ao passo que os quatro últimos são chamados de *operadores de 
incremento*.

Aqui cabe destacar as diferenças entre os operadores de incremento quanto à 
localização dos operadores aritméticos. Considere os exemplos a seguir:


[source, c]
-----------------
 x = 0;
 y = 6;
 z = 2;
 (a) x = y / ++z; // incremento antes
 // y = 6, z = 3, x = 2
-----------------


[source, c]
-----------------
 x = 0;
 y = 6;
 z = 2;

 (b) x = y / z++;  // incremento depois
 // y = 6, z = 3, x = 3
-----------------


Nos exemplos apresentados, temos dois algoritmos que se diferenciam apenas pela 
utilização dos operadores de incremento de adição. Na 
expressão (a), a variável `y` é dividida por `++z`, enquanto que na expressão 
(b) ela é dividida por `z++`. A diferença é sutil, mas é determinante no 
resultado da expressão. No primeiro caso, `z` é incrementada antes da divisão, 
logo `x=6÷(2 + 1)=6÷3=2`. Na expressão (b), z é incrementado depois da divisão, 
o que resulta em `x=6÷2=3`. Repare que em ambos os casos o valor de `z` é 
incrementado, de modo que após as instruções (a) e (b) o valor de `z` é igual a 3.

=== Entrada e saída de dados

Imagine que você desenvolveu um programa para controlar suas finanças 
pessoais e com ele intenciona conter seus gastos e ainda guardar uma parte do 
que ganha na poupança.  Esse programa necessita de interação? Como você 
informará suas receitas e despesas? Como ele apresentará o resultado dos seus 
cálculos com a finalidade de auxiliá-lo no controle de suas finanças? 

As respostas de todas essas perguntas convergem para a seguinte conclusão: um 
programa de computador é praticamente inútil se não apresentar algum tipo de 
interação com o usuário. No cenário anterior, por exemplo, você precisa 
informar ao programa quais são as suas receitas e despesas. Além disso, é 
necessário que ele o deixe a par dos resultados dos seus cálculos, caso 
contrário ele não terá serventia alguma. 

(((stdio)))

Os mecanismos que as linguagens de programação oferecem para interação com 
o usuário estão presentes em suas bibliotecas de entrada e saída.  Em C, as 
funções responsáveis pelas operações básicas de entrada e saída se 
encontram na biblioteca *stdio*, que é utilizada por meio da diretiva:

 #include <stdio.h>

////
TODO - REV.25: Sugestão de melhoria para análise pelo autor 
Rever linhas 1073 e 1074.
////
 
Vimos não seção 2.6 uma forma de exibir na tela uma sequência de caracteres 
através da função `printf()`, que, além de imprimir caracteres, também é 
capaz de exibir o conteúdo de variáveis de diversos tipos.  Os detalhes de 
sua utilização, bem como uma função similar para entrada de dados são 
apresentados não nas seções posteriores.

==== Função printf()

A função de saída `printf()` permite que dados sejam escritos na saída 
padrão, que normalmente é a tela do computador. Uma chamada da função 
`printf` tem o seguinte formato:

 int printf(string_de_formato, arg1, arg2, ..., argn)

Isso quer dizer que a função `printf` irá escrever na saída padrão os 
argumentos `arg1,arg2,...,argn` de acordo com o que está especificado no 
parâmetro `string_de_formato`. Além disso, o tipo *int* indica que a função 
retorna um número inteiro, que neste caso corresponde ao número de caracteres 
impressos. O exemplo a seguir ilustra a utilização da função `printf()`:

[source, c]
-------------
#include <stdio.h>

int main() {
   int idade;
   float altura; 
   idade = 18;
   altura = 1.90;

   printf("Tenho %d anos e %.2f de altura.", idade, altura);

   return 0;
}
-------------

Após a execução do código acima será exibida na tela a seguinte frase:

 Tenho 18 anos e 1.90 de altura.

Os caracteres `%d` e `%.2f` são denominados de especificadores de formato e têm o 
objetivo de definir o formato das variáveis que serão escritas na saída 
padrão. De outro modo, podemos entendê-los como "guardadores de lugar" 
para as variáveis a serem exibidas. No exemplo acima, no lugar do `%d` será 
colocada a primeira variável passada por parâmetro (`idade`) e no lugar do `%.2f` 
a segunda variável (`altura`). Além disso, elas deverão ser dos tipos `int` e 
`float`, respectivamente. O ponto seguido de um número antes do código de 
formato indica a quantidade de casas decimais a serem exibidas (quando 
aplicados a variáveis do tipo ponto-flutuante) e são denominados de 
especificadores de precisão. No exemplo anterior eles foram os responsáveis 
pela exibição da variável `altura` com duas casas decimais.

A tabela abaixo lista os especificadores de formato mais comuns utilizados na 
função `printf()`. 

////
TODO - REV.26: Sugestão de melhoria para análise pelo autor 
Recomendaria adicionar exemplos.
////

.Especificadores de formatos mais utilizados na função printf()
[width="65%",cols="^1m,2",frame="topbot",options="header"]
|======================
|Código |Formato
| %d ou %i | Inteiro (int) decimal
| %ld ou %li | Inteiro (long int) decimal
| %u | Inteiro sem sinal
| %c | Caractere
| %s | Cadeira de caracteres
| %f | Número de ponto-flutuante 
|======================


=== Função scanf()

A função de entrada `scanf()` possibilita a leitura de dados da entrada 
padrão, ou seja, do teclado. O que ela faz é interromper a execução do 
programa até que o usuário digite algo e depois pressione a tecla Enter. 
Depois que o programa retoma sua execução, o conteúdo digitado é armazenado 
em uma ou mais variáveis. Uma chamada da função `scanf` tem o seguinte formato:

 int scanf(string_de_formato, arg1, arg2, ..., argn)

O parâmetro `string_de_formato` especifica os tipos de dados que serão lidos e 
os parâmetros `arg, arg2, ..., argn` correspondem aos endereços das variáveis 
nas quais serão armazenados os valores digitados pelo usuário. A função 
`scanf()` retorna um valor inteiro que indica o número de variáveis que tiveram 
valores atribuídos, sendo utilizado para verificar algum problema na entrada 
de dados. O exemplo a seguir ilustra a utilização da função `scanf()`:

[source, c]
-----------------
#include <stdio.h>

int main() {
   int idade;
   float altura; 

   printf("Informe sua idade: ");
   scanf("%d", &idade)
   printf("Informe sua altura: ");
   scanf("%f", &altura);

   printf("\nVocê tem %d anos e %.2f de altura.", idade, altura);

   return 0;
}
-----------------


Ao contrário do exemplo da seção anterior, os dados a serem exibidos não 
estão pré-determinados, isto é, as variáveis não possuem valores a priori. 
As atribuições apenas ocorrem quando o usuário entra com valores via 
teclado.  No exemplo, depois que a sequência de caracteres `"Informe sua 
idade: "` é exibida, a execução do programa é interrompida até que o 
usuário digite um valor. Quando isso ocorre, ele é armazenado no endereço da 
variável `idade`, obtido quando ela é precedida pelo caractere `&`. Por 
conseguinte, o `printf()` ao final do código irá exibir os dados informados 
pelo usuário e não os dados pré-determinados pelo programador. 

IMPORTANT: A tecla Enter também possui um caractere que a representa, a saber, o 
caractere especial ‘\n’. Portanto, quando o ’\n’ é escrito na saída 
padrão, o efeito gerado é o mesmo da digitação da tecla Enter.

A função `scanf()` também pode ler numa mesma linha diversos dados, 
armazenando-os em diferentes variáveis. As leituras do código anterior, por 
exemplo, podem ser reescritas da seguinte forma:

[source, c]
-------------
printf("Informe sua idade e sua altura:");
scanf("%d %.2f", &idade)
-------------

Para que esse código funcione como desejado, o usuário precisa digitar um 
número inteiro seguido de um espaço e depois um número de ponto-flutuante. O 
espaço é requerido porque ele é utilizado na especificação do formato 
(entre o `%d` e o `%.2f` há um espaço). Assim como `printf()`, a função `scanf()` 
também possui uma lista de especificadores de formato. Os mais utilizados 
seguem abaixo:

.Especificadores de formatos mais utilizados da função scanf()
[width="75%",cols="^1m,4",frame="topbot",options="header,footer"]
|======================
|Código        |Significado
| `%d ou %i`   | Leitura de um inteiro (int) decimal
| `%ld ou %li` | Leitura deum inteiro (long int) decimal
| `%u` | Leitura de um inteiro sem sinal
| `%c` | Leitura de um único caractere
| `%s` | Leitura de uma cadeira de caracteres
| `%f` | Leitura de um número de ponto-flutuante 
|======================

////
TODO - REV.27: Sugestão de melhoria para análise pelo autor 
Precisamos adicionar exercícios, tanto comentados como propostos. 
////

// FIXME faltando recapitulando e atividades


// Sempre termine os arquivos com uma linha em branco.

